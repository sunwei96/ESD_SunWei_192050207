
project_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004184  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043e8  080043e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080043f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004978  20000010  08004400  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004988  08004400  00024988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010346  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002185  00000000  00000000  00030386  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  00033078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002230  00000000  00000000  00033ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a610  00000000  00000000  00035d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6d83  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001170ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd8  00000000  00000000  00117128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800431c 	.word	0x0800431c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800431c 	.word	0x0800431c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 f9b8 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f83a 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f898 	bl	8000630 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000500:	f001 f8f0 	bl	80016e4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (8, sizeof(unsigned int), &myQueue01_attributes);
 8000504:	4a11      	ldr	r2, [pc, #68]	; (800054c <main+0x5c>)
 8000506:	2104      	movs	r1, #4
 8000508:	2008      	movs	r0, #8
 800050a:	f001 fa2b 	bl	8001964 <osMessageQueueNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <main+0x60>)
 8000512:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <main+0x64>)
 8000516:	2100      	movs	r1, #0
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x68>)
 800051a:	f001 f94b 	bl	80017b4 <osThreadNew>
 800051e:	4602      	mov	r2, r0
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <main+0x6c>)
 8000522:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <main+0x70>)
 8000526:	2100      	movs	r1, #0
 8000528:	480e      	ldr	r0, [pc, #56]	; (8000564 <main+0x74>)
 800052a:	f001 f943 	bl	80017b4 <osThreadNew>
 800052e:	4602      	mov	r2, r0
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <main+0x78>)
 8000532:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  //create queue
  xQueue = xQueueCreate(8, sizeof(unsigned int));
 8000534:	2200      	movs	r2, #0
 8000536:	2104      	movs	r1, #4
 8000538:	2008      	movs	r0, #8
 800053a:	f001 fc5b 	bl	8001df4 <xQueueGenericCreate>
 800053e:	4602      	mov	r2, r0
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <main+0x7c>)
 8000542:	601a      	str	r2, [r3, #0]

  /* Start scheduler */
  osKernelStart();
 8000544:	f001 f902 	bl	800174c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x58>
 800054a:	bf00      	nop
 800054c:	080043b8 	.word	0x080043b8
 8000550:	20004940 	.word	0x20004940
 8000554:	08004370 	.word	0x08004370
 8000558:	08000699 	.word	0x08000699
 800055c:	20004934 	.word	0x20004934
 8000560:	08004394 	.word	0x08004394
 8000564:	080006d5 	.word	0x080006d5
 8000568:	20004938 	.word	0x20004938
 800056c:	2000493c 	.word	0x2000493c

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fec3 	bl	800430a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xb8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <SystemClock_Config+0xb8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <SystemClock_Config+0xb8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <SystemClock_Config+0xbc>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <SystemClock_Config+0xbc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fc75 	bl	8000ed4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f0:	f000 f89e 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fed0 	bl	80013b4 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061a:	f000 f889 	bl	8000730 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_GPIO_Init+0x60>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <MX_GPIO_Init+0x60>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	6313      	str	r3, [r2, #48]	; 0x30
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_GPIO_Init+0x60>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <MX_GPIO_Init+0x64>)
 8000668:	f000 fc00 	bl	8000e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800066c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0x64>)
 8000684:	f000 fa48 	bl	8000b18 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020400 	.word	0x40020400

08000698 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	unsigned int lValueToSend = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
	  BaseType_t xStatus;
	//  lValueToSend = ( int32_t ) argument;
	  for(;;)
	  {
		xStatus = xQueueSendToBack( xQueue, (void *)&lValueToSend, portMAX_DELAY );
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <StartDefaultTask+0x38>)
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	f107 0108 	add.w	r1, r7, #8
 80006ac:	2300      	movs	r3, #0
 80006ae:	f04f 32ff 	mov.w	r2, #4294967295
 80006b2:	f001 fbff 	bl	8001eb4 <xQueueGenericSend>
 80006b6:	60f8      	str	r0, [r7, #12]
	    osDelay(lValueToSend*1000);
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f920 	bl	8001908 <osDelay>
	    lValueToSend++;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
		xStatus = xQueueSendToBack( xQueue, (void *)&lValueToSend, portMAX_DELAY );
 80006ce:	e7e9      	b.n	80006a4 <StartDefaultTask+0xc>
 80006d0:	2000493c 	.word	0x2000493c

080006d4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	  unsigned int ReceivedValue;
	  BaseType_t xStatus;
	//  const TickType_t xTicksToWait = pdMS_TO_TICKS( 100UL );
	  for(;;)
	  {
		if(uxQueueMessagesWaiting(xQueue) > 1){
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <StartTask02+0x54>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fe51 	bl	8002388 <uxQueueMessagesWaiting>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d9f7      	bls.n	80006dc <StartTask02+0x8>
			xStatus = xQueueReceive( xQueue, &ReceivedValue, portMAX_DELAY);
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <StartTask02+0x54>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f107 010c 	add.w	r1, r7, #12
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fd69 	bl	80021d0 <xQueueReceive>
 80006fe:	6138      	str	r0, [r7, #16]
	//		if( xStatus == pdPASS )
			for(int i = 0; i < ReceivedValue; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e00a      	b.n	800071c <StartTask02+0x48>
			{
				HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <StartTask02+0x58>)
 800070c:	f000 fbc7 	bl	8000e9e <HAL_GPIO_TogglePin>
				osDelay(100);
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	f001 f8f9 	bl	8001908 <osDelay>
			for(int i = 0; i < ReceivedValue; i++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3f0      	bcc.n	8000706 <StartTask02+0x32>
		if(uxQueueMessagesWaiting(xQueue) > 1){
 8000724:	e7da      	b.n	80006dc <StartTask02+0x8>
 8000726:	bf00      	nop
 8000728:	2000493c 	.word	0x2000493c
 800072c:	40020400 	.word	0x40020400

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_MspInit+0x54>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <HAL_MspInit+0x54>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x54>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_MspInit+0x54>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_MspInit+0x54>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	; 0x40
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_MspInit+0x54>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	210f      	movs	r1, #15
 8000782:	f06f 0001 	mvn.w	r0, #1
 8000786:	f000 f99e 	bl	8000ac6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f89c 	bl	800090c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007d4:	f002 fd6c 	bl	80032b0 <xTaskGetSchedulerState>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d001      	beq.n	80007e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007de:	f003 fb03 	bl	8003de8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <SystemInit+0x28>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <SystemInit+0x28>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SystemInit+0x28>)
 80007fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000802:	609a      	str	r2, [r3, #8]
#endif
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800084c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr  r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000834:	f842 3b04 	str.w	r3, [r2], #4

08000838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800083e:	f7ff ffd3 	bl	80007e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f003 fd33 	bl	80042ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff fe53 	bl	80004f0 <main>
  bx  lr    
 800084a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800084c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000850:	080043f0 	.word	0x080043f0
  ldr  r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000858:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800085c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000860:	20004988 	.word	0x20004988

08000864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_Init+0x40>)
 8000872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_Init+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_Init+0x40>)
 800087e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_Init+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <HAL_Init+0x40>)
 800088a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f90d 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	200f      	movs	r0, #15
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff ff50 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023c00 	.word	0x40023c00

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f917 	bl	8000afe <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f8ed 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20004944 	.word	0x20004944

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20004944 	.word	0x20004944

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff47 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff5c 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff8e 	bl	8000a04 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5d 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffb0 	bl	8000a6c <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	e177      	b.n	8000e24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b34:	2201      	movs	r2, #1
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8166 	bne.w	8000e1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d00b      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d007      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b66:	2b11      	cmp	r3, #17
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b12      	cmp	r3, #18
 8000b70:	d130      	bne.n	8000bd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4013      	ands	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	f003 0201 	and.w	r2, r3, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0xfc>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b12      	cmp	r3, #18
 8000c12:	d123      	bne.n	8000c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	69b9      	ldr	r1, [r7, #24]
 8000c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0203 	and.w	r2, r3, #3
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80c0 	beq.w	8000e1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b65      	ldr	r3, [pc, #404]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a64      	ldr	r2, [pc, #400]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b62      	ldr	r3, [pc, #392]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cba:	4a60      	ldr	r2, [pc, #384]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a57      	ldr	r2, [pc, #348]	; (8000e40 <HAL_GPIO_Init+0x328>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d037      	beq.n	8000d56 <HAL_GPIO_Init+0x23e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a56      	ldr	r2, [pc, #344]	; (8000e44 <HAL_GPIO_Init+0x32c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d031      	beq.n	8000d52 <HAL_GPIO_Init+0x23a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a55      	ldr	r2, [pc, #340]	; (8000e48 <HAL_GPIO_Init+0x330>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d02b      	beq.n	8000d4e <HAL_GPIO_Init+0x236>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a54      	ldr	r2, [pc, #336]	; (8000e4c <HAL_GPIO_Init+0x334>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d025      	beq.n	8000d4a <HAL_GPIO_Init+0x232>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a53      	ldr	r2, [pc, #332]	; (8000e50 <HAL_GPIO_Init+0x338>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d01f      	beq.n	8000d46 <HAL_GPIO_Init+0x22e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a52      	ldr	r2, [pc, #328]	; (8000e54 <HAL_GPIO_Init+0x33c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d019      	beq.n	8000d42 <HAL_GPIO_Init+0x22a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <HAL_GPIO_Init+0x340>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0x226>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a50      	ldr	r2, [pc, #320]	; (8000e5c <HAL_GPIO_Init+0x344>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00d      	beq.n	8000d3a <HAL_GPIO_Init+0x222>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4f      	ldr	r2, [pc, #316]	; (8000e60 <HAL_GPIO_Init+0x348>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d007      	beq.n	8000d36 <HAL_GPIO_Init+0x21e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4e      	ldr	r2, [pc, #312]	; (8000e64 <HAL_GPIO_Init+0x34c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_GPIO_Init+0x21a>
 8000d2e:	2309      	movs	r3, #9
 8000d30:	e012      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d32:	230a      	movs	r3, #10
 8000d34:	e010      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d36:	2308      	movs	r3, #8
 8000d38:	e00e      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	e00c      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e00a      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d42:	2305      	movs	r3, #5
 8000d44:	e008      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d46:	2304      	movs	r3, #4
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e004      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d56:	2300      	movs	r3, #0
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	f002 0203 	and.w	r2, r2, #3
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4093      	lsls	r3, r2
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d68:	4934      	ldr	r1, [pc, #208]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d76:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d9a:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dc4:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3301      	adds	r3, #1
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	f67f ae84 	bls.w	8000b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3724      	adds	r7, #36	; 0x24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020c00 	.word	0x40020c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40021400 	.word	0x40021400
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40021c00 	.word	0x40021c00
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40022400 	.word	0x40022400
 8000e68:	40013c00 	.word	0x40013c00

08000e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e7c:	787b      	ldrb	r3, [r7, #1]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e82:	887a      	ldrh	r2, [r7, #2]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e88:	e003      	b.n	8000e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	041a      	lsls	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	619a      	str	r2, [r3, #24]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d104      	bne.n	8000ec2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	041a      	lsls	r2, r3, #16
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e25b      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d075      	beq.n	8000fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef2:	4ba3      	ldr	r3, [pc, #652]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d00c      	beq.n	8000f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efe:	4ba0      	ldr	r3, [pc, #640]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d112      	bne.n	8000f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0a:	4b9d      	ldr	r3, [pc, #628]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f16:	d10b      	bne.n	8000f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f18:	4b99      	ldr	r3, [pc, #612]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d05b      	beq.n	8000fdc <HAL_RCC_OscConfig+0x108>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d157      	bne.n	8000fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e236      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f38:	d106      	bne.n	8000f48 <HAL_RCC_OscConfig+0x74>
 8000f3a:	4b91      	ldr	r3, [pc, #580]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a90      	ldr	r2, [pc, #576]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e01d      	b.n	8000f84 <HAL_RCC_OscConfig+0xb0>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x98>
 8000f52:	4b8b      	ldr	r3, [pc, #556]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a8a      	ldr	r2, [pc, #552]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b88      	ldr	r3, [pc, #544]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a87      	ldr	r2, [pc, #540]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e00b      	b.n	8000f84 <HAL_RCC_OscConfig+0xb0>
 8000f6c:	4b84      	ldr	r3, [pc, #528]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a83      	ldr	r2, [pc, #524]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b81      	ldr	r3, [pc, #516]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a80      	ldr	r2, [pc, #512]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcd2 	bl	8000934 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcce 	bl	8000934 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e1fb      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	4b76      	ldr	r3, [pc, #472]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0xc0>
 8000fb2:	e014      	b.n	8000fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fcbe 	bl	8000934 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fcba 	bl	8000934 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e1e7      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0xe8>
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d063      	beq.n	80010b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff6:	4b62      	ldr	r3, [pc, #392]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d11c      	bne.n	800103c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d116      	bne.n	800103c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <HAL_RCC_OscConfig+0x152>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d001      	beq.n	8001026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e1bb      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4b56      	ldr	r3, [pc, #344]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4952      	ldr	r1, [pc, #328]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103a:	e03a      	b.n	80010b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001044:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <HAL_RCC_OscConfig+0x2b0>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104a:	f7ff fc73 	bl	8000934 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff fc6f 	bl	8000934 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e19c      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	4b46      	ldr	r3, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f0      	beq.n	8001052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b43      	ldr	r3, [pc, #268]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4940      	ldr	r1, [pc, #256]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	4313      	orrs	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
 8001084:	e015      	b.n	80010b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001086:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <HAL_RCC_OscConfig+0x2b0>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fc52 	bl	8000934 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fc4e 	bl	8000934 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e17b      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d030      	beq.n	8001120 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d016      	beq.n	80010f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <HAL_RCC_OscConfig+0x2b4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010cc:	f7ff fc32 	bl	8000934 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d4:	f7ff fc2e 	bl	8000934 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e15b      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x200>
 80010f2:	e015      	b.n	8001120 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_RCC_OscConfig+0x2b4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fc1b 	bl	8000934 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001102:	f7ff fc17 	bl	8000934 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e144      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80a0 	beq.w	800126e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10f      	bne.n	800115e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115a:	2301      	movs	r3, #1
 800115c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_RCC_OscConfig+0x2b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	2b00      	cmp	r3, #0
 8001168:	d121      	bne.n	80011ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_RCC_OscConfig+0x2b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_RCC_OscConfig+0x2b8>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001176:	f7ff fbdd 	bl	8000934 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	e011      	b.n	80011a2 <HAL_RCC_OscConfig+0x2ce>
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	42470000 	.word	0x42470000
 8001188:	42470e80 	.word	0x42470e80
 800118c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001190:	f7ff fbd0 	bl	8000934 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e0fd      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_RCC_OscConfig+0x4d4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2f0>
 80011b6:	4b7d      	ldr	r3, [pc, #500]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ba:	4a7c      	ldr	r2, [pc, #496]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6713      	str	r3, [r2, #112]	; 0x70
 80011c2:	e01c      	b.n	80011fe <HAL_RCC_OscConfig+0x32a>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d10c      	bne.n	80011e6 <HAL_RCC_OscConfig+0x312>
 80011cc:	4b77      	ldr	r3, [pc, #476]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d0:	4a76      	ldr	r2, [pc, #472]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6713      	str	r3, [r2, #112]	; 0x70
 80011d8:	4b74      	ldr	r3, [pc, #464]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011dc:	4a73      	ldr	r2, [pc, #460]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6713      	str	r3, [r2, #112]	; 0x70
 80011e4:	e00b      	b.n	80011fe <HAL_RCC_OscConfig+0x32a>
 80011e6:	4b71      	ldr	r3, [pc, #452]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ea:	4a70      	ldr	r2, [pc, #448]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6713      	str	r3, [r2, #112]	; 0x70
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f6:	4a6d      	ldr	r2, [pc, #436]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011f8:	f023 0304 	bic.w	r3, r3, #4
 80011fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d015      	beq.n	8001232 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001206:	f7ff fb95 	bl	8000934 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fb91 	bl	8000934 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4293      	cmp	r3, r2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e0bc      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	4b61      	ldr	r3, [pc, #388]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0ee      	beq.n	800120e <HAL_RCC_OscConfig+0x33a>
 8001230:	e014      	b.n	800125c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff fb7f 	bl	8000934 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fb7b 	bl	8000934 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e0a6      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	4b56      	ldr	r3, [pc, #344]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ee      	bne.n	800123a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d105      	bne.n	800126e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001262:	4b52      	ldr	r3, [pc, #328]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a51      	ldr	r2, [pc, #324]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8092 	beq.w	800139c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	2b08      	cmp	r3, #8
 8001282:	d05c      	beq.n	800133e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d141      	bne.n	8001310 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128c:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <HAL_RCC_OscConfig+0x4dc>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fb4f 	bl	8000934 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fb4b 	bl	8000934 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e078      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f0      	bne.n	800129a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	019b      	lsls	r3, r3, #6
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	3b01      	subs	r3, #1
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	061b      	lsls	r3, r3, #24
 80012dc:	4933      	ldr	r1, [pc, #204]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <HAL_RCC_OscConfig+0x4dc>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb24 	bl	8000934 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fb20 	bl	8000934 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e04d      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x41c>
 800130e:	e045      	b.n	800139c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_RCC_OscConfig+0x4dc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb0d 	bl	8000934 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb09 	bl	8000934 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e036      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x44a>
 800133c:	e02e      	b.n	800139c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e029      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	429a      	cmp	r2, r3
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d115      	bne.n	8001398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001372:	4013      	ands	r3, r2
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001378:	4293      	cmp	r3, r2
 800137a:	d10d      	bne.n	8001398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d106      	bne.n	8001398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40007000 	.word	0x40007000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	42470060 	.word	0x42470060

080013b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0cc      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d90c      	bls.n	80013f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b63      	ldr	r3, [pc, #396]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0b8      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001408:	4b59      	ldr	r3, [pc, #356]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a58      	ldr	r2, [pc, #352]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800142a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	494d      	ldr	r1, [pc, #308]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	4313      	orrs	r3, r2
 800143c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d044      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d119      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e07f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d003      	beq.n	8001472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800146e:	2b03      	cmp	r3, #3
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e067      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f023 0203 	bic.w	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4934      	ldr	r1, [pc, #208]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fa46 	bl	8000934 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ac:	f7ff fa42 	bl	8000934 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e04f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 020c 	and.w	r2, r3, #12
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d1eb      	bne.n	80014ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d20c      	bcs.n	80014fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e032      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4916      	ldr	r1, [pc, #88]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	490e      	ldr	r1, [pc, #56]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800153a:	f000 f821 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 800153e:	4601      	mov	r1, r0
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
 800154e:	fa21 f303 	lsr.w	r3, r1, r3
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_ClockConfig+0x1c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f9a6 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00
 8001570:	40023800 	.word	0x40023800
 8001574:	080043d0 	.word	0x080043d0
 8001578:	20000000 	.word	0x20000000
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001596:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d007      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x32>
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d008      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x38>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 808d 	bne.w	80016c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80015ae:	60bb      	str	r3, [r7, #8]
       break;
 80015b0:	e08c      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015b4:	60bb      	str	r3, [r7, #8]
      break;
 80015b6:	e089      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b8:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c2:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d023      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	f04f 0400 	mov.w	r4, #0
 80015d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	ea03 0501 	and.w	r5, r3, r1
 80015e4:	ea04 0602 	and.w	r6, r4, r2
 80015e8:	4a3d      	ldr	r2, [pc, #244]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015ea:	fb02 f106 	mul.w	r1, r2, r6
 80015ee:	2200      	movs	r2, #0
 80015f0:	fb02 f205 	mul.w	r2, r2, r5
 80015f4:	440a      	add	r2, r1
 80015f6:	493a      	ldr	r1, [pc, #232]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015f8:	fba5 0101 	umull	r0, r1, r5, r1
 80015fc:	1853      	adds	r3, r2, r1
 80015fe:	4619      	mov	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f04f 0400 	mov.w	r4, #0
 8001606:	461a      	mov	r2, r3
 8001608:	4623      	mov	r3, r4
 800160a:	f7fe fdf1 	bl	80001f0 <__aeabi_uldivmod>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e049      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	099b      	lsrs	r3, r3, #6
 800161c:	f04f 0400 	mov.w	r4, #0
 8001620:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	ea03 0501 	and.w	r5, r3, r1
 800162c:	ea04 0602 	and.w	r6, r4, r2
 8001630:	4629      	mov	r1, r5
 8001632:	4632      	mov	r2, r6
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	f04f 0400 	mov.w	r4, #0
 800163c:	0154      	lsls	r4, r2, #5
 800163e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001642:	014b      	lsls	r3, r1, #5
 8001644:	4619      	mov	r1, r3
 8001646:	4622      	mov	r2, r4
 8001648:	1b49      	subs	r1, r1, r5
 800164a:	eb62 0206 	sbc.w	r2, r2, r6
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f04f 0400 	mov.w	r4, #0
 8001656:	0194      	lsls	r4, r2, #6
 8001658:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800165c:	018b      	lsls	r3, r1, #6
 800165e:	1a5b      	subs	r3, r3, r1
 8001660:	eb64 0402 	sbc.w	r4, r4, r2
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	00e2      	lsls	r2, r4, #3
 800166e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001672:	00d9      	lsls	r1, r3, #3
 8001674:	460b      	mov	r3, r1
 8001676:	4614      	mov	r4, r2
 8001678:	195b      	adds	r3, r3, r5
 800167a:	eb44 0406 	adc.w	r4, r4, r6
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	02a2      	lsls	r2, r4, #10
 8001688:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800168c:	0299      	lsls	r1, r3, #10
 800168e:	460b      	mov	r3, r1
 8001690:	4614      	mov	r4, r2
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f04f 0400 	mov.w	r4, #0
 800169c:	461a      	mov	r2, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	f7fe fda6 	bl	80001f0 <__aeabi_uldivmod>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	0c1b      	lsrs	r3, r3, #16
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	3301      	adds	r3, #1
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	60bb      	str	r3, [r7, #8]
      break;
 80016c4:	e002      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80016c8:	60bb      	str	r3, [r7, #8]
      break;
 80016ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016cc:	68bb      	ldr	r3, [r7, #8]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	017d7840 	.word	0x017d7840

080016e4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016ea:	f3ef 8305 	mrs	r3, IPSR
 80016ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80016f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10f      	bne.n	8001716 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016f6:	f3ef 8310 	mrs	r3, PRIMASK
 80016fa:	607b      	str	r3, [r7, #4]
  return(result);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <osKernelInitialize+0x32>
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <osKernelInitialize+0x64>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d109      	bne.n	800171e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800170a:	f3ef 8311 	mrs	r3, BASEPRI
 800170e:	603b      	str	r3, [r7, #0]
  return(result);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001716:	f06f 0305 	mvn.w	r3, #5
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e00c      	b.n	8001738 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <osKernelInitialize+0x64>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <osKernelInitialize+0x64>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e002      	b.n	8001738 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001738:	68fb      	ldr	r3, [r7, #12]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000002c 	.word	0x2000002c

0800174c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001752:	f3ef 8305 	mrs	r3, IPSR
 8001756:	60bb      	str	r3, [r7, #8]
  return(result);
 8001758:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800175e:	f3ef 8310 	mrs	r3, PRIMASK
 8001762:	607b      	str	r3, [r7, #4]
  return(result);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <osKernelStart+0x32>
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <osKernelStart+0x64>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d109      	bne.n	8001786 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001772:	f3ef 8311 	mrs	r3, BASEPRI
 8001776:	603b      	str	r3, [r7, #0]
  return(result);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <osKernelStart+0x3a>
    stat = osErrorISR;
 800177e:	f06f 0305 	mvn.w	r3, #5
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e00e      	b.n	80017a4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <osKernelStart+0x64>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <osKernelStart+0x64>)
 8001790:	2202      	movs	r2, #2
 8001792:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001794:	f001 f94a 	bl	8002a2c <vTaskStartScheduler>
      stat = osOK;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e002      	b.n	80017a4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000002c 	.word	0x2000002c

080017b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b092      	sub	sp, #72	; 0x48
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017c4:	f3ef 8305 	mrs	r3, IPSR
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f040 8094 	bne.w	80018fa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017d2:	f3ef 8310 	mrs	r3, PRIMASK
 80017d6:	623b      	str	r3, [r7, #32]
  return(result);
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 808d 	bne.w	80018fa <osThreadNew+0x146>
 80017e0:	4b48      	ldr	r3, [pc, #288]	; (8001904 <osThreadNew+0x150>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d106      	bne.n	80017f6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017e8:	f3ef 8311 	mrs	r3, BASEPRI
 80017ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f040 8082 	bne.w	80018fa <osThreadNew+0x146>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d07e      	beq.n	80018fa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001800:	2318      	movs	r3, #24
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001804:	2300      	movs	r3, #0
 8001806:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001808:	f107 031b 	add.w	r3, r7, #27
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d045      	beq.n	80018a6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <osThreadNew+0x74>
        name = attr->name;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <osThreadNew+0x9a>
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	2b38      	cmp	r3, #56	; 0x38
 8001840:	d805      	bhi.n	800184e <osThreadNew+0x9a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <osThreadNew+0x9e>
        return (NULL);
 800184e:	2300      	movs	r3, #0
 8001850:	e054      	b.n	80018fc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00e      	beq.n	8001888 <osThreadNew+0xd4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b5b      	cmp	r3, #91	; 0x5b
 8001870:	d90a      	bls.n	8001888 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <osThreadNew+0xd4>
        mem = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
 8001886:	e010      	b.n	80018aa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10c      	bne.n	80018aa <osThreadNew+0xf6>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d108      	bne.n	80018aa <osThreadNew+0xf6>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d104      	bne.n	80018aa <osThreadNew+0xf6>
          mem = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a4:	e001      	b.n	80018aa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80018aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d110      	bne.n	80018d2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018b8:	9202      	str	r2, [sp, #8]
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fee8 	bl	800269c <xTaskCreateStatic>
 80018cc:	4603      	mov	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e013      	b.n	80018fa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d110      	bne.n	80018fa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80018d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 ff2f 	bl	800274e <xTaskCreate>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d001      	beq.n	80018fa <osThreadNew+0x146>
          hTask = NULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80018fa:	697b      	ldr	r3, [r7, #20]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3738      	adds	r7, #56	; 0x38
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000002c 	.word	0x2000002c

08001908 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001910:	f3ef 8305 	mrs	r3, IPSR
 8001914:	613b      	str	r3, [r7, #16]
  return(result);
 8001916:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10f      	bne.n	800193c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800191c:	f3ef 8310 	mrs	r3, PRIMASK
 8001920:	60fb      	str	r3, [r7, #12]
  return(result);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <osDelay+0x34>
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <osDelay+0x58>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d109      	bne.n	8001944 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001930:	f3ef 8311 	mrs	r3, BASEPRI
 8001934:	60bb      	str	r3, [r7, #8]
  return(result);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <osDelay+0x3c>
    stat = osErrorISR;
 800193c:	f06f 0305 	mvn.w	r3, #5
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e007      	b.n	8001954 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <osDelay+0x4c>
      vTaskDelay(ticks);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f001 f838 	bl	80029c4 <vTaskDelay>
    }
  }

  return (stat);
 8001954:	697b      	ldr	r3, [r7, #20]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000002c 	.word	0x2000002c

08001964 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af02      	add	r7, sp, #8
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001974:	f3ef 8305 	mrs	r3, IPSR
 8001978:	61bb      	str	r3, [r7, #24]
  return(result);
 800197a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800197c:	2b00      	cmp	r3, #0
 800197e:	d170      	bne.n	8001a62 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001980:	f3ef 8310 	mrs	r3, PRIMASK
 8001984:	617b      	str	r3, [r7, #20]
  return(result);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d16a      	bne.n	8001a62 <osMessageQueueNew+0xfe>
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <osMessageQueueNew+0x108>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d105      	bne.n	80019a0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001994:	f3ef 8311 	mrs	r3, BASEPRI
 8001998:	613b      	str	r3, [r7, #16]
  return(result);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d160      	bne.n	8001a62 <osMessageQueueNew+0xfe>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d05d      	beq.n	8001a62 <osMessageQueueNew+0xfe>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d05a      	beq.n	8001a62 <osMessageQueueNew+0xfe>
    mem = -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d029      	beq.n	8001a0c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d012      	beq.n	80019e6 <osMessageQueueNew+0x82>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b4f      	cmp	r3, #79	; 0x4f
 80019c6:	d90e      	bls.n	80019e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	429a      	cmp	r2, r3
 80019de:	d302      	bcc.n	80019e6 <osMessageQueueNew+0x82>
        mem = 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	623b      	str	r3, [r7, #32]
 80019e4:	e014      	b.n	8001a10 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d110      	bne.n	8001a10 <osMessageQueueNew+0xac>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <osMessageQueueNew+0xac>
          mem = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	e001      	b.n	8001a10 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10c      	bne.n	8001a30 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6899      	ldr	r1, [r3, #8]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	460b      	mov	r3, r1
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f972 	bl	8001d10 <xQueueGenericCreateStatic>
 8001a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8001a2e:	e008      	b.n	8001a42 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d105      	bne.n	8001a42 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001a36:	2200      	movs	r2, #0
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f9da 	bl	8001df4 <xQueueGenericCreate>
 8001a40:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00c      	beq.n	8001a62 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <osMessageQueueNew+0xf2>
        name = attr->name;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	e001      	b.n	8001a5a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001a5a:	69f9      	ldr	r1, [r7, #28]
 8001a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a5e:	f000 fdc1 	bl	80025e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000002c 	.word	0x2000002c

08001a70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <vApplicationGetIdleTaskMemory+0x30>)
 8001a86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	601a      	str	r2, [r3, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000030 	.word	0x20000030
 8001aa0:	2000008c 	.word	0x2000008c

08001aa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <vApplicationGetTimerTaskMemory+0x30>)
 8001aba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	2000028c 	.word	0x2000028c
 8001ad4:	200002e8 	.word	0x200002e8

08001ad8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 0208 	add.w	r2, r3, #8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f103 0208 	add.w	r2, r3, #8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f103 0208 	add.w	r2, r3, #8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d103      	bne.n	8001b9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e00c      	b.n	8001bb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3308      	adds	r3, #8
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e002      	b.n	8001ba8 <vListInsert+0x2e>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d2f6      	bcs.n	8001ba2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6892      	ldr	r2, [r2, #8]
 8001c02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6852      	ldr	r2, [r2, #4]
 8001c0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d103      	bne.n	8001c20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	e7fe      	b.n	8001c66 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001c68:	f002 f830 	bl	8003ccc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	441a      	add	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	441a      	add	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	22ff      	movs	r2, #255	; 0xff
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d114      	bne.n	8001ce8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01a      	beq.n	8001cfc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3310      	adds	r3, #16
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 f934 	bl	8002f38 <xTaskRemoveFromEventList>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <xQueueGenericReset+0xcc>)
 8001cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	e009      	b.n	8001cfc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3310      	adds	r3, #16
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fef3 	bl	8001ad8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3324      	adds	r3, #36	; 0x24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff feee 	bl	8001ad8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cfc:	f002 f814 	bl	8003d28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000ed04 	.word	0xe000ed04

08001d10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <xQueueGenericCreateStatic+0x28>
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d36:	e7fe      	b.n	8001d36 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <xQueueGenericCreateStatic+0x42>
 8001d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d42:	f383 8811 	msr	BASEPRI, r3
 8001d46:	f3bf 8f6f 	isb	sy
 8001d4a:	f3bf 8f4f 	dsb	sy
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d50:	e7fe      	b.n	8001d50 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <xQueueGenericCreateStatic+0x4e>
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <xQueueGenericCreateStatic+0x52>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <xQueueGenericCreateStatic+0x54>
 8001d62:	2300      	movs	r3, #0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <xQueueGenericCreateStatic+0x6c>
 8001d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	e7fe      	b.n	8001d7a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <xQueueGenericCreateStatic+0x78>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <xQueueGenericCreateStatic+0x7c>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <xQueueGenericCreateStatic+0x7e>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <xQueueGenericCreateStatic+0x96>
 8001d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e7fe      	b.n	8001da4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001da6:	2350      	movs	r3, #80	; 0x50
 8001da8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b50      	cmp	r3, #80	; 0x50
 8001dae:	d009      	beq.n	8001dc4 <xQueueGenericCreateStatic+0xb4>
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	e7fe      	b.n	8001dc2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f842 	bl	8001e6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3730      	adds	r7, #48	; 0x30
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <xQueueGenericCreate+0x28>
 8001e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e7fe      	b.n	8001e1a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e004      	b.n	8001e32 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3350      	adds	r3, #80	; 0x50
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 f862 	bl	8003f00 <pvPortMalloc>
 8001e3c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00f      	beq.n	8001e64 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	3350      	adds	r3, #80	; 0x50
 8001e48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f805 	bl	8001e6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001e64:	69bb      	ldr	r3, [r7, #24]
	}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e002      	b.n	8001e90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	69b8      	ldr	r0, [r7, #24]
 8001ea0:	f7ff fece 	bl	8001c40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08e      	sub	sp, #56	; 0x38
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <xQueueGenericSend+0x30>
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee2:	e7fe      	b.n	8001ee2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <xQueueGenericSend+0x3e>
 8001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <xQueueGenericSend+0x42>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <xQueueGenericSend+0x44>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <xQueueGenericSend+0x5c>
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	e7fe      	b.n	8001f0e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d103      	bne.n	8001f1e <xQueueGenericSend+0x6a>
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <xQueueGenericSend+0x6e>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <xQueueGenericSend+0x70>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <xQueueGenericSend+0x88>
 8001f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2c:	f383 8811 	msr	BASEPRI, r3
 8001f30:	f3bf 8f6f 	isb	sy
 8001f34:	f3bf 8f4f 	dsb	sy
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	e7fe      	b.n	8001f3a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f3c:	f001 f9b8 	bl	80032b0 <xTaskGetSchedulerState>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <xQueueGenericSend+0x98>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <xQueueGenericSend+0x9c>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <xQueueGenericSend+0x9e>
 8001f50:	2300      	movs	r3, #0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <xQueueGenericSend+0xb6>
 8001f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5a:	f383 8811 	msr	BASEPRI, r3
 8001f5e:	f3bf 8f6f 	isb	sy
 8001f62:	f3bf 8f4f 	dsb	sy
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	e7fe      	b.n	8001f68 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f6a:	f001 feaf 	bl	8003ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <xQueueGenericSend+0xcc>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d129      	bne.n	8001fd4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f86:	f000 fa1c 	bl	80023c2 <prvCopyDataToQueue>
 8001f8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	3324      	adds	r3, #36	; 0x24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 ffcd 	bl	8002f38 <xTaskRemoveFromEventList>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001fa4:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <xQueueGenericSend+0x1f0>)
 8001fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	f3bf 8f6f 	isb	sy
 8001fb4:	e00a      	b.n	8001fcc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <xQueueGenericSend+0x1f0>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001fcc:	f001 feac 	bl	8003d28 <vPortExitCritical>
				return pdPASS;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e063      	b.n	800209c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fda:	f001 fea5 	bl	8003d28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e05c      	b.n	800209c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 f805 	bl	8002ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ff6:	f001 fe97 	bl	8003d28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ffa:	f000 fd7b 	bl	8002af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ffe:	f001 fe65 	bl	8003ccc <vPortEnterCritical>
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002008:	b25b      	sxtb	r3, r3
 800200a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200e:	d103      	bne.n	8002018 <xQueueGenericSend+0x164>
 8002010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800201e:	b25b      	sxtb	r3, r3
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d103      	bne.n	800202e <xQueueGenericSend+0x17a>
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800202e:	f001 fe7b 	bl	8003d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002032:	1d3a      	adds	r2, r7, #4
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fff4 	bl	8003028 <xTaskCheckForTimeOut>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d124      	bne.n	8002090 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002048:	f000 fab3 	bl	80025b2 <prvIsQueueFull>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d018      	beq.n	8002084 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	3310      	adds	r3, #16
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f000 ff1e 	bl	8002e9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002062:	f000 fa3e 	bl	80024e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002066:	f000 fd53 	bl	8002b10 <xTaskResumeAll>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	f47f af7c 	bne.w	8001f6a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <xQueueGenericSend+0x1f0>)
 8002074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	f3bf 8f6f 	isb	sy
 8002082:	e772      	b.n	8001f6a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002086:	f000 fa2c 	bl	80024e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800208a:	f000 fd41 	bl	8002b10 <xTaskResumeAll>
 800208e:	e76c      	b.n	8001f6a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002092:	f000 fa26 	bl	80024e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002096:	f000 fd3b 	bl	8002b10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800209a:	2300      	movs	r3, #0
		}
	}
}
 800209c:	4618      	mov	r0, r3
 800209e:	3738      	adds	r7, #56	; 0x38
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	e000ed04 	.word	0xe000ed04

080020a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08e      	sub	sp, #56	; 0x38
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80020ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <xQueueGenericSendFromISR+0x2c>
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	e7fe      	b.n	80020d2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <xQueueGenericSendFromISR+0x3a>
 80020da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <xQueueGenericSendFromISR+0x3e>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <xQueueGenericSendFromISR+0x40>
 80020e6:	2300      	movs	r3, #0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <xQueueGenericSendFromISR+0x58>
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	e7fe      	b.n	80020fe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d103      	bne.n	800210e <xQueueGenericSendFromISR+0x66>
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <xQueueGenericSendFromISR+0x6a>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <xQueueGenericSendFromISR+0x6c>
 8002112:	2300      	movs	r3, #0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <xQueueGenericSendFromISR+0x84>
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	f383 8811 	msr	BASEPRI, r3
 8002120:	f3bf 8f6f 	isb	sy
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e7fe      	b.n	800212a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800212c:	f001 feaa 	bl	8003e84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002130:	f3ef 8211 	mrs	r2, BASEPRI
 8002134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	61ba      	str	r2, [r7, #24]
 8002146:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002148:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	429a      	cmp	r2, r3
 8002156:	d302      	bcc.n	800215e <xQueueGenericSendFromISR+0xb6>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d12c      	bne.n	80021b8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800216e:	f000 f928 	bl	80023c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002172:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d112      	bne.n	80021a2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d016      	beq.n	80021b2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	3324      	adds	r3, #36	; 0x24
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fed5 	bl	8002f38 <xTaskRemoveFromEventList>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e007      	b.n	80021b2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80021a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80021b2:	2301      	movs	r3, #1
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80021b6:	e001      	b.n	80021bc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80021c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3738      	adds	r7, #56	; 0x38
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <xQueueReceive+0x2e>
	__asm volatile
 80021ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	623b      	str	r3, [r7, #32]
 80021fc:	e7fe      	b.n	80021fc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <xQueueReceive+0x3c>
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <xQueueReceive+0x40>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <xQueueReceive+0x42>
 8002210:	2300      	movs	r3, #0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <xQueueReceive+0x5a>
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	e7fe      	b.n	8002228 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800222a:	f001 f841 	bl	80032b0 <xTaskGetSchedulerState>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <xQueueReceive+0x6a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <xQueueReceive+0x6e>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <xQueueReceive+0x70>
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <xQueueReceive+0x88>
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e7fe      	b.n	8002256 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002258:	f001 fd38 	bl	8003ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01f      	beq.n	80022a8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800226c:	f000 f913 	bl	8002496 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	1e5a      	subs	r2, r3, #1
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00f      	beq.n	80022a0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	3310      	adds	r3, #16
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fe57 	bl	8002f38 <xTaskRemoveFromEventList>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002290:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <xQueueReceive+0x1b4>)
 8002292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80022a0:	f001 fd42 	bl	8003d28 <vPortExitCritical>
				return pdPASS;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e069      	b.n	800237c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022ae:	f001 fd3b 	bl	8003d28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e062      	b.n	800237c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fe9b 	bl	8002ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022c6:	2301      	movs	r3, #1
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022ca:	f001 fd2d 	bl	8003d28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022ce:	f000 fc11 	bl	8002af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022d2:	f001 fcfb 	bl	8003ccc <vPortEnterCritical>
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d103      	bne.n	80022ec <xQueueReceive+0x11c>
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d103      	bne.n	8002302 <xQueueReceive+0x132>
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002302:	f001 fd11 	bl	8003d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002306:	1d3a      	adds	r2, r7, #4
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fe8a 	bl	8003028 <xTaskCheckForTimeOut>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d123      	bne.n	8002362 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800231a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800231c:	f000 f933 	bl	8002586 <prvIsQueueEmpty>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	3324      	adds	r3, #36	; 0x24
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fdb4 	bl	8002e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002336:	f000 f8d4 	bl	80024e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800233a:	f000 fbe9 	bl	8002b10 <xTaskResumeAll>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d189      	bne.n	8002258 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <xQueueReceive+0x1b4>)
 8002346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	e780      	b.n	8002258 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002358:	f000 f8c3 	bl	80024e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800235c:	f000 fbd8 	bl	8002b10 <xTaskResumeAll>
 8002360:	e77a      	b.n	8002258 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002364:	f000 f8bd 	bl	80024e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002368:	f000 fbd2 	bl	8002b10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800236c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800236e:	f000 f90a 	bl	8002586 <prvIsQueueEmpty>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f43f af6f 	beq.w	8002258 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800237a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800237c:	4618      	mov	r0, r3
 800237e:	3730      	adds	r7, #48	; 0x30
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	e000ed04 	.word	0xe000ed04

08002388 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <uxQueueMessagesWaiting+0x22>
 8002396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239a:	f383 8811 	msr	BASEPRI, r3
 800239e:	f3bf 8f6f 	isb	sy
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	e7fe      	b.n	80023a8 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80023aa:	f001 fc8f 	bl	8003ccc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80023b4:	f001 fcb8 	bl	8003d28 <vPortExitCritical>

	return uxReturn;
 80023b8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10d      	bne.n	80023fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d14d      	bne.n	8002484 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 ff7d 	bl	80032ec <xTaskPriorityDisinherit>
 80023f2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	e043      	b.n	8002484 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d119      	bne.n	8002436 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6898      	ldr	r0, [r3, #8]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	461a      	mov	r2, r3
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	f001 ff71 	bl	80042f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	441a      	add	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d32b      	bcc.n	8002484 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	e026      	b.n	8002484 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68d8      	ldr	r0, [r3, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	461a      	mov	r2, r3
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	f001 ff57 	bl	80042f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	425b      	negs	r3, r3
 8002450:	441a      	add	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d207      	bcs.n	8002472 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	425b      	negs	r3, r3
 800246c:	441a      	add	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d105      	bne.n	8002484 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	3b01      	subs	r3, #1
 8002482:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800248c:	697b      	ldr	r3, [r7, #20]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d018      	beq.n	80024da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	441a      	add	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d303      	bcc.n	80024ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68d9      	ldr	r1, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	461a      	mov	r2, r3
 80024d4:	6838      	ldr	r0, [r7, #0]
 80024d6:	f001 ff0d 	bl	80042f4 <memcpy>
	}
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80024ea:	f001 fbef 	bl	8003ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024f6:	e011      	b.n	800251c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3324      	adds	r3, #36	; 0x24
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fd17 	bl	8002f38 <xTaskRemoveFromEventList>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002510:	f000 fdea 	bl	80030e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3b01      	subs	r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800251c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	dce9      	bgt.n	80024f8 <prvUnlockQueue+0x16>
 8002524:	e000      	b.n	8002528 <prvUnlockQueue+0x46>
					break;
 8002526:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	22ff      	movs	r2, #255	; 0xff
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002530:	f001 fbfa 	bl	8003d28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002534:	f001 fbca 	bl	8003ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800253e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002540:	e011      	b.n	8002566 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3310      	adds	r3, #16
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fcf2 	bl	8002f38 <xTaskRemoveFromEventList>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800255a:	f000 fdc5 	bl	80030e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800255e:	7bbb      	ldrb	r3, [r7, #14]
 8002560:	3b01      	subs	r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800256a:	2b00      	cmp	r3, #0
 800256c:	dce9      	bgt.n	8002542 <prvUnlockQueue+0x60>
 800256e:	e000      	b.n	8002572 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002570:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	22ff      	movs	r2, #255	; 0xff
 8002576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800257a:	f001 fbd5 	bl	8003d28 <vPortExitCritical>
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800258e:	f001 fb9d 	bl	8003ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800259a:	2301      	movs	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e001      	b.n	80025a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025a4:	f001 fbc0 	bl	8003d28 <vPortExitCritical>

	return xReturn;
 80025a8:	68fb      	ldr	r3, [r7, #12]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025ba:	f001 fb87 	bl	8003ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d102      	bne.n	80025d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e001      	b.n	80025d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025d4:	f001 fba8 	bl	8003d28 <vPortExitCritical>

	return xReturn;
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e014      	b.n	800261e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <vQueueAddToRegistry+0x4c>)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10b      	bne.n	8002618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002600:	490b      	ldr	r1, [pc, #44]	; (8002630 <vQueueAddToRegistry+0x4c>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <vQueueAddToRegistry+0x4c>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002616:	e005      	b.n	8002624 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3301      	adds	r3, #1
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b07      	cmp	r3, #7
 8002622:	d9e7      	bls.n	80025f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	20004948 	.word	0x20004948

08002634 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002644:	f001 fb42 	bl	8003ccc <vPortEnterCritical>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800264e:	b25b      	sxtb	r3, r3
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d103      	bne.n	800265e <vQueueWaitForMessageRestricted+0x2a>
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002664:	b25b      	sxtb	r3, r3
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d103      	bne.n	8002674 <vQueueWaitForMessageRestricted+0x40>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002674:	f001 fb58 	bl	8003d28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3324      	adds	r3, #36	; 0x24
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fc2b 	bl	8002ee4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff27 	bl	80024e2 <prvUnlockQueue>
	}
 8002694:	bf00      	nop
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af04      	add	r7, sp, #16
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <xTaskCreateStatic+0x28>
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	e7fe      	b.n	80026c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <xTaskCreateStatic+0x42>
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	e7fe      	b.n	80026dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026de:	235c      	movs	r3, #92	; 0x5c
 80026e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b5c      	cmp	r3, #92	; 0x5c
 80026e6:	d009      	beq.n	80026fc <xTaskCreateStatic+0x60>
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e7fe      	b.n	80026fa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01e      	beq.n	8002740 <xTaskCreateStatic+0xa4>
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01b      	beq.n	8002740 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002710:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800271a:	2300      	movs	r3, #0
 800271c:	9303      	str	r3, [sp, #12]
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	9302      	str	r3, [sp, #8]
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f850 	bl	80027d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800273a:	f000 f8d3 	bl	80028e4 <prvAddNewTaskToReadyList>
 800273e:	e001      	b.n	8002744 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002744:	697b      	ldr	r3, [r7, #20]
	}
 8002746:	4618      	mov	r0, r3
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800274e:	b580      	push	{r7, lr}
 8002750:	b08c      	sub	sp, #48	; 0x30
 8002752:	af04      	add	r7, sp, #16
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4618      	mov	r0, r3
 8002764:	f001 fbcc 	bl	8003f00 <pvPortMalloc>
 8002768:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00e      	beq.n	800278e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002770:	205c      	movs	r0, #92	; 0x5c
 8002772:	f001 fbc5 	bl	8003f00 <pvPortMalloc>
 8002776:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
 8002784:	e005      	b.n	8002792 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f001 fc7c 	bl	8004084 <vPortFree>
 800278c:	e001      	b.n	8002792 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d017      	beq.n	80027c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	2300      	movs	r3, #0
 80027a4:	9303      	str	r3, [sp, #12]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f80e 	bl	80027d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027bc:	69f8      	ldr	r0, [r7, #28]
 80027be:	f000 f891 	bl	80028e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027c2:	2301      	movs	r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	e002      	b.n	80027ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
 80027cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80027ce:	69bb      	ldr	r3, [r7, #24]
	}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	461a      	mov	r2, r3
 80027f0:	21a5      	movs	r1, #165	; 0xa5
 80027f2:	f001 fd8a 	bl	800430a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002800:	3b01      	subs	r3, #1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f023 0307 	bic.w	r3, r3, #7
 800280e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <prvInitialiseNewTask+0x56>
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	e7fe      	b.n	800282c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e012      	b.n	800285a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	7819      	ldrb	r1, [r3, #0]
 800283c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	3334      	adds	r3, #52	; 0x34
 8002844:	460a      	mov	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4413      	add	r3, r2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3301      	adds	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	d9e9      	bls.n	8002834 <prvInitialiseNewTask+0x5c>
 8002860:	e000      	b.n	8002864 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002862:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2b37      	cmp	r3, #55	; 0x37
 8002870:	d901      	bls.n	8002876 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002872:	2337      	movs	r3, #55	; 0x37
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002880:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	2200      	movs	r2, #0
 8002886:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	3304      	adds	r3, #4
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff f943 	bl	8001b18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	3318      	adds	r3, #24
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f93e 	bl	8001b18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	2200      	movs	r2, #0
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	68f9      	ldr	r1, [r7, #12]
 80028c4:	69b8      	ldr	r0, [r7, #24]
 80028c6:	f001 f8db 	bl	8003a80 <pxPortInitialiseStack>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028dc:	bf00      	nop
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028ec:	f001 f9ee 	bl	8003ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <prvAddNewTaskToReadyList+0xc4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	4a2c      	ldr	r2, [pc, #176]	; (80029a8 <prvAddNewTaskToReadyList+0xc4>)
 80028f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028fa:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <prvAddNewTaskToReadyList+0xc8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002902:	4a2a      	ldr	r2, [pc, #168]	; (80029ac <prvAddNewTaskToReadyList+0xc8>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <prvAddNewTaskToReadyList+0xc4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d110      	bne.n	8002932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002910:	f000 fc0e 	bl	8003130 <prvInitialiseTaskLists>
 8002914:	e00d      	b.n	8002932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <prvAddNewTaskToReadyList+0xcc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800291e:	4b23      	ldr	r3, [pc, #140]	; (80029ac <prvAddNewTaskToReadyList+0xc8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	429a      	cmp	r2, r3
 800292a:	d802      	bhi.n	8002932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800292c:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <prvAddNewTaskToReadyList+0xc8>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <prvAddNewTaskToReadyList+0xd0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <prvAddNewTaskToReadyList+0xd0>)
 800293a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <prvAddNewTaskToReadyList+0xd0>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <prvAddNewTaskToReadyList+0xd4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d903      	bls.n	8002958 <prvAddNewTaskToReadyList+0x74>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <prvAddNewTaskToReadyList+0xd4>)
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <prvAddNewTaskToReadyList+0xd8>)
 8002966:	441a      	add	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f7ff f8df 	bl	8001b32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002974:	f001 f9d8 	bl	8003d28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <prvAddNewTaskToReadyList+0xcc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <prvAddNewTaskToReadyList+0xc8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	429a      	cmp	r2, r3
 800298c:	d207      	bcs.n	800299e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <prvAddNewTaskToReadyList+0xdc>)
 8002990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000bbc 	.word	0x20000bbc
 80029ac:	200006e8 	.word	0x200006e8
 80029b0:	20000bc8 	.word	0x20000bc8
 80029b4:	20000bd8 	.word	0x20000bd8
 80029b8:	20000bc4 	.word	0x20000bc4
 80029bc:	200006ec 	.word	0x200006ec
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <vTaskDelay+0x60>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <vTaskDelay+0x2e>
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	e7fe      	b.n	80029f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80029f2:	f000 f87f 	bl	8002af4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029f6:	2100      	movs	r1, #0
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fce3 	bl	80033c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029fe:	f000 f887 	bl	8002b10 <xTaskResumeAll>
 8002a02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d107      	bne.n	8002a1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <vTaskDelay+0x64>)
 8002a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000be4 	.word	0x20000be4
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a3a:	463a      	mov	r2, r7
 8002a3c:	1d39      	adds	r1, r7, #4
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f814 	bl	8001a70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	9202      	str	r2, [sp, #8]
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2300      	movs	r3, #0
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2300      	movs	r3, #0
 8002a58:	460a      	mov	r2, r1
 8002a5a:	4920      	ldr	r1, [pc, #128]	; (8002adc <vTaskStartScheduler+0xb0>)
 8002a5c:	4820      	ldr	r0, [pc, #128]	; (8002ae0 <vTaskStartScheduler+0xb4>)
 8002a5e:	f7ff fe1d 	bl	800269c <xTaskCreateStatic>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <vTaskStartScheduler+0xb8>)
 8002a66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <vTaskStartScheduler+0xb8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a70:	2301      	movs	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e001      	b.n	8002a7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002a80:	f000 fcf4 	bl	800346c <xTimerCreateTimerTask>
 8002a84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d115      	bne.n	8002ab8 <vTaskStartScheduler+0x8c>
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <vTaskStartScheduler+0xbc>)
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <vTaskStartScheduler+0xc0>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <vTaskStartScheduler+0xc4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ab2:	f001 f86d 	bl	8003b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ab6:	e00d      	b.n	8002ad4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d109      	bne.n	8002ad4 <vTaskStartScheduler+0xa8>
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e7fe      	b.n	8002ad2 <vTaskStartScheduler+0xa6>
}
 8002ad4:	bf00      	nop
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	08004358 	.word	0x08004358
 8002ae0:	08003101 	.word	0x08003101
 8002ae4:	20000be0 	.word	0x20000be0
 8002ae8:	20000bdc 	.word	0x20000bdc
 8002aec:	20000bc8 	.word	0x20000bc8
 8002af0:	20000bc0 	.word	0x20000bc0

08002af4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <vTaskSuspendAll+0x18>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <vTaskSuspendAll+0x18>)
 8002b00:	6013      	str	r3, [r2, #0]
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	20000be4 	.word	0x20000be4

08002b10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <xTaskResumeAll+0x114>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <xTaskResumeAll+0x2a>
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	e7fe      	b.n	8002b38 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b3a:	f001 f8c7 	bl	8003ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <xTaskResumeAll+0x114>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	4a37      	ldr	r2, [pc, #220]	; (8002c24 <xTaskResumeAll+0x114>)
 8002b46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <xTaskResumeAll+0x114>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d162      	bne.n	8002c16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b50:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <xTaskResumeAll+0x118>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d05e      	beq.n	8002c16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b58:	e02f      	b.n	8002bba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <xTaskResumeAll+0x11c>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3318      	adds	r3, #24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f840 	bl	8001bec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f83b 	bl	8001bec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7a:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <xTaskResumeAll+0x120>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d903      	bls.n	8002b8a <xTaskResumeAll+0x7a>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <xTaskResumeAll+0x120>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <xTaskResumeAll+0x124>)
 8002b98:	441a      	add	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f7fe ffc6 	bl	8001b32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <xTaskResumeAll+0x128>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d302      	bcc.n	8002bba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002bb4:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <xTaskResumeAll+0x12c>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <xTaskResumeAll+0x11c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1cb      	bne.n	8002b5a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002bc8:	f000 fb4c 	bl	8003264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <xTaskResumeAll+0x130>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002bd8:	f000 f846 	bl	8002c68 <xTaskIncrementTick>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002be2:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <xTaskResumeAll+0x12c>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f1      	bne.n	8002bd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <xTaskResumeAll+0x130>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <xTaskResumeAll+0x12c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <xTaskResumeAll+0x134>)
 8002c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c16:	f001 f887 	bl	8003d28 <vPortExitCritical>

	return xAlreadyYielded;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000be4 	.word	0x20000be4
 8002c28:	20000bbc 	.word	0x20000bbc
 8002c2c:	20000b7c 	.word	0x20000b7c
 8002c30:	20000bc4 	.word	0x20000bc4
 8002c34:	200006ec 	.word	0x200006ec
 8002c38:	200006e8 	.word	0x200006e8
 8002c3c:	20000bd0 	.word	0x20000bd0
 8002c40:	20000bcc 	.word	0x20000bcc
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <xTaskGetTickCount+0x1c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c54:	687b      	ldr	r3, [r7, #4]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000bc0 	.word	0x20000bc0

08002c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c72:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <xTaskIncrementTick+0x150>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 808d 	bne.w	8002d96 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <xTaskIncrementTick+0x154>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c84:	4a4d      	ldr	r2, [pc, #308]	; (8002dbc <xTaskIncrementTick+0x154>)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11f      	bne.n	8002cd0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c90:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <xTaskIncrementTick+0x158>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <xTaskIncrementTick+0x46>
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	e7fe      	b.n	8002cac <xTaskIncrementTick+0x44>
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <xTaskIncrementTick+0x158>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <xTaskIncrementTick+0x15c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a41      	ldr	r2, [pc, #260]	; (8002dc0 <xTaskIncrementTick+0x158>)
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4a41      	ldr	r2, [pc, #260]	; (8002dc4 <xTaskIncrementTick+0x15c>)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <xTaskIncrementTick+0x160>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <xTaskIncrementTick+0x160>)
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	f000 faca 	bl	8003264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002cd0:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <xTaskIncrementTick+0x164>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d34e      	bcc.n	8002d78 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cda:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <xTaskIncrementTick+0x158>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <xTaskIncrementTick+0x80>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <xTaskIncrementTick+0x82>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <xTaskIncrementTick+0x164>)
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	601a      	str	r2, [r3, #0]
					break;
 8002cf6:	e03f      	b.n	8002d78 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cf8:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <xTaskIncrementTick+0x158>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d203      	bcs.n	8002d18 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d10:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <xTaskIncrementTick+0x164>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
						break;
 8002d16:	e02f      	b.n	8002d78 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe ff65 	bl	8001bec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe ff5c 	bl	8001bec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <xTaskIncrementTick+0x168>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d903      	bls.n	8002d48 <xTaskIncrementTick+0xe0>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <xTaskIncrementTick+0x168>)
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <xTaskIncrementTick+0x16c>)
 8002d56:	441a      	add	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	f7fe fee7 	bl	8001b32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <xTaskIncrementTick+0x170>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d3b3      	bcc.n	8002cda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002d72:	2301      	movs	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d76:	e7b0      	b.n	8002cda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <xTaskIncrementTick+0x170>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	4915      	ldr	r1, [pc, #84]	; (8002dd4 <xTaskIncrementTick+0x16c>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d907      	bls.n	8002da0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e004      	b.n	8002da0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <xTaskIncrementTick+0x174>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <xTaskIncrementTick+0x174>)
 8002d9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <xTaskIncrementTick+0x178>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002dac:	697b      	ldr	r3, [r7, #20]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000be4 	.word	0x20000be4
 8002dbc:	20000bc0 	.word	0x20000bc0
 8002dc0:	20000b74 	.word	0x20000b74
 8002dc4:	20000b78 	.word	0x20000b78
 8002dc8:	20000bd4 	.word	0x20000bd4
 8002dcc:	20000bdc 	.word	0x20000bdc
 8002dd0:	20000bc4 	.word	0x20000bc4
 8002dd4:	200006ec 	.word	0x200006ec
 8002dd8:	200006e8 	.word	0x200006e8
 8002ddc:	20000bcc 	.word	0x20000bcc
 8002de0:	20000bd0 	.word	0x20000bd0

08002de4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dea:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <vTaskSwitchContext+0xa4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <vTaskSwitchContext+0xa8>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002df8:	e040      	b.n	8002e7c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <vTaskSwitchContext+0xa8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <vTaskSwitchContext+0xac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e00f      	b.n	8002e28 <vTaskSwitchContext+0x44>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <vTaskSwitchContext+0x3e>
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	e7fe      	b.n	8002e20 <vTaskSwitchContext+0x3c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	491a      	ldr	r1, [pc, #104]	; (8002e94 <vTaskSwitchContext+0xb0>)
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0e5      	beq.n	8002e08 <vTaskSwitchContext+0x24>
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <vTaskSwitchContext+0xb0>)
 8002e48:	4413      	add	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d104      	bne.n	8002e6c <vTaskSwitchContext+0x88>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <vTaskSwitchContext+0xb4>)
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <vTaskSwitchContext+0xac>)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	20000be4 	.word	0x20000be4
 8002e8c:	20000bd0 	.word	0x20000bd0
 8002e90:	20000bc4 	.word	0x20000bc4
 8002e94:	200006ec 	.word	0x200006ec
 8002e98:	200006e8 	.word	0x200006e8

08002e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <vTaskPlaceOnEventList+0x24>
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e7fe      	b.n	8002ebe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <vTaskPlaceOnEventList+0x44>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3318      	adds	r3, #24
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fe fe56 	bl	8001b7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ece:	2101      	movs	r1, #1
 8002ed0:	6838      	ldr	r0, [r7, #0]
 8002ed2:	f000 fa77 	bl	80033c4 <prvAddCurrentTaskToDelayedList>
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200006e8 	.word	0x200006e8

08002ee4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <vTaskPlaceOnEventListRestricted+0x26>
 8002ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e7fe      	b.n	8002f08 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <vTaskPlaceOnEventListRestricted+0x50>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3318      	adds	r3, #24
 8002f10:	4619      	mov	r1, r3
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7fe fe0d 	bl	8001b32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	f000 fa4c 	bl	80033c4 <prvAddCurrentTaskToDelayedList>
	}
 8002f2c:	bf00      	nop
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200006e8 	.word	0x200006e8

08002f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <xTaskRemoveFromEventList+0x2a>
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e7fe      	b.n	8002f60 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	3318      	adds	r3, #24
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fe40 	bl	8001bec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <xTaskRemoveFromEventList+0xac>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11d      	bne.n	8002fb0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fe37 	bl	8001bec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <xTaskRemoveFromEventList+0xb0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d903      	bls.n	8002f92 <xTaskRemoveFromEventList+0x5a>
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <xTaskRemoveFromEventList+0xb0>)
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <xTaskRemoveFromEventList+0xb4>)
 8002fa0:	441a      	add	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f7fe fdc2 	bl	8001b32 <vListInsertEnd>
 8002fae:	e005      	b.n	8002fbc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	3318      	adds	r3, #24
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	480e      	ldr	r0, [pc, #56]	; (8002ff0 <xTaskRemoveFromEventList+0xb8>)
 8002fb8:	f7fe fdbb 	bl	8001b32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <xTaskRemoveFromEventList+0xbc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d905      	bls.n	8002fd6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <xTaskRemoveFromEventList+0xc0>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e001      	b.n	8002fda <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002fda:	697b      	ldr	r3, [r7, #20]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000be4 	.word	0x20000be4
 8002fe8:	20000bc4 	.word	0x20000bc4
 8002fec:	200006ec 	.word	0x200006ec
 8002ff0:	20000b7c 	.word	0x20000b7c
 8002ff4:	200006e8 	.word	0x200006e8
 8002ff8:	20000bd0 	.word	0x20000bd0

08002ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <vTaskInternalSetTimeOutState+0x24>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <vTaskInternalSetTimeOutState+0x28>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	605a      	str	r2, [r3, #4]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	20000bd4 	.word	0x20000bd4
 8003024:	20000bc0 	.word	0x20000bc0

08003028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <xTaskCheckForTimeOut+0x24>
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	e7fe      	b.n	800304a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <xTaskCheckForTimeOut+0x3e>
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e7fe      	b.n	8003064 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003066:	f000 fe31 	bl	8003ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <xTaskCheckForTimeOut+0xb8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d102      	bne.n	800308a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	e023      	b.n	80030d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <xTaskCheckForTimeOut+0xbc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d007      	beq.n	80030a6 <xTaskCheckForTimeOut+0x7e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	e015      	b.n	80030d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d20b      	bcs.n	80030c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	1ad2      	subs	r2, r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff9d 	bl	8002ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e004      	b.n	80030d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030d2:	f000 fe29 	bl	8003d28 <vPortExitCritical>

	return xReturn;
 80030d6:	69fb      	ldr	r3, [r7, #28]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000bc0 	.word	0x20000bc0
 80030e4:	20000bd4 	.word	0x20000bd4

080030e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <vTaskMissedYield+0x14>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	bf00      	nop
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20000bd0 	.word	0x20000bd0

08003100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003108:	f000 f852 	bl	80031b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <prvIdleTask+0x28>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d9f9      	bls.n	8003108 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <prvIdleTask+0x2c>)
 8003116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003124:	e7f0      	b.n	8003108 <prvIdleTask+0x8>
 8003126:	bf00      	nop
 8003128:	200006ec 	.word	0x200006ec
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	e00c      	b.n	8003156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <prvInitialiseTaskLists+0x60>)
 8003148:	4413      	add	r3, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fcc4 	bl	8001ad8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3301      	adds	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b37      	cmp	r3, #55	; 0x37
 800315a:	d9ef      	bls.n	800313c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800315c:	480d      	ldr	r0, [pc, #52]	; (8003194 <prvInitialiseTaskLists+0x64>)
 800315e:	f7fe fcbb 	bl	8001ad8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003162:	480d      	ldr	r0, [pc, #52]	; (8003198 <prvInitialiseTaskLists+0x68>)
 8003164:	f7fe fcb8 	bl	8001ad8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003168:	480c      	ldr	r0, [pc, #48]	; (800319c <prvInitialiseTaskLists+0x6c>)
 800316a:	f7fe fcb5 	bl	8001ad8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800316e:	480c      	ldr	r0, [pc, #48]	; (80031a0 <prvInitialiseTaskLists+0x70>)
 8003170:	f7fe fcb2 	bl	8001ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <prvInitialiseTaskLists+0x74>)
 8003176:	f7fe fcaf 	bl	8001ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <prvInitialiseTaskLists+0x78>)
 800317c:	4a05      	ldr	r2, [pc, #20]	; (8003194 <prvInitialiseTaskLists+0x64>)
 800317e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <prvInitialiseTaskLists+0x7c>)
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <prvInitialiseTaskLists+0x68>)
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200006ec 	.word	0x200006ec
 8003194:	20000b4c 	.word	0x20000b4c
 8003198:	20000b60 	.word	0x20000b60
 800319c:	20000b7c 	.word	0x20000b7c
 80031a0:	20000b90 	.word	0x20000b90
 80031a4:	20000ba8 	.word	0x20000ba8
 80031a8:	20000b74 	.word	0x20000b74
 80031ac:	20000b78 	.word	0x20000b78

080031b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031b6:	e019      	b.n	80031ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031b8:	f000 fd88 	bl	8003ccc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <prvCheckTasksWaitingTermination+0x4c>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe fd0f 	bl	8001bec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <prvCheckTasksWaitingTermination+0x50>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <prvCheckTasksWaitingTermination+0x50>)
 80031d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <prvCheckTasksWaitingTermination+0x54>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3b01      	subs	r3, #1
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <prvCheckTasksWaitingTermination+0x54>)
 80031e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031e2:	f000 fda1 	bl	8003d28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f80e 	bl	8003208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <prvCheckTasksWaitingTermination+0x54>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e1      	bne.n	80031b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000b90 	.word	0x20000b90
 8003200:	20000bbc 	.word	0x20000bbc
 8003204:	20000ba4 	.word	0x20000ba4

08003208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4618      	mov	r0, r3
 8003220:	f000 ff30 	bl	8004084 <vPortFree>
				vPortFree( pxTCB );
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 ff2d 	bl	8004084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800322a:	e017      	b.n	800325c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003232:	2b01      	cmp	r3, #1
 8003234:	d103      	bne.n	800323e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 ff24 	bl	8004084 <vPortFree>
	}
 800323c:	e00e      	b.n	800325c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003244:	2b02      	cmp	r3, #2
 8003246:	d009      	beq.n	800325c <prvDeleteTCB+0x54>
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e7fe      	b.n	800325a <prvDeleteTCB+0x52>
	}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <prvResetNextTaskUnblockTime+0x44>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <prvResetNextTaskUnblockTime+0x14>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <prvResetNextTaskUnblockTime+0x16>
 8003278:	2300      	movs	r3, #0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <prvResetNextTaskUnblockTime+0x48>)
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003286:	e008      	b.n	800329a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <prvResetNextTaskUnblockTime+0x44>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a05      	ldr	r2, [pc, #20]	; (80032ac <prvResetNextTaskUnblockTime+0x48>)
 8003298:	6013      	str	r3, [r2, #0]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000b74 	.word	0x20000b74
 80032ac:	20000bdc 	.word	0x20000bdc

080032b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <xTaskGetSchedulerState+0x34>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032be:	2301      	movs	r3, #1
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	e008      	b.n	80032d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <xTaskGetSchedulerState+0x38>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032cc:	2302      	movs	r3, #2
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	e001      	b.n	80032d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032d6:	687b      	ldr	r3, [r7, #4]
	}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	20000bc8 	.word	0x20000bc8
 80032e8:	20000be4 	.word	0x20000be4

080032ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d054      	beq.n	80033ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <xTaskPriorityDisinherit+0xcc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	429a      	cmp	r2, r3
 800330a:	d009      	beq.n	8003320 <xTaskPriorityDisinherit+0x34>
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e7fe      	b.n	800331e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <xTaskPriorityDisinherit+0x50>
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	e7fe      	b.n	800333a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	429a      	cmp	r2, r3
 8003350:	d02c      	beq.n	80033ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	2b00      	cmp	r3, #0
 8003358:	d128      	bne.n	80033ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	3304      	adds	r3, #4
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fc44 	bl	8001bec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <xTaskPriorityDisinherit+0xd0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d903      	bls.n	800338c <xTaskPriorityDisinherit+0xa0>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <xTaskPriorityDisinherit+0xd0>)
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <xTaskPriorityDisinherit+0xd4>)
 800339a:	441a      	add	r2, r3
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f7fe fbc5 	bl	8001b32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80033a8:	2301      	movs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033ac:	697b      	ldr	r3, [r7, #20]
	}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200006e8 	.word	0x200006e8
 80033bc:	20000bc4 	.word	0x20000bc4
 80033c0:	200006ec 	.word	0x200006ec

080033c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033ce:	4b21      	ldr	r3, [pc, #132]	; (8003454 <prvAddCurrentTaskToDelayedList+0x90>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033d4:	4b20      	ldr	r3, [pc, #128]	; (8003458 <prvAddCurrentTaskToDelayedList+0x94>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3304      	adds	r3, #4
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fc06 	bl	8001bec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d10a      	bne.n	80033fe <prvAddCurrentTaskToDelayedList+0x3a>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <prvAddCurrentTaskToDelayedList+0x94>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4819      	ldr	r0, [pc, #100]	; (800345c <prvAddCurrentTaskToDelayedList+0x98>)
 80033f8:	f7fe fb9b 	bl	8001b32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033fc:	e026      	b.n	800344c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <prvAddCurrentTaskToDelayedList+0x94>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	429a      	cmp	r2, r3
 8003414:	d209      	bcs.n	800342a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <prvAddCurrentTaskToDelayedList+0x94>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3304      	adds	r3, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f7fe fba9 	bl	8001b7a <vListInsert>
}
 8003428:	e010      	b.n	800344c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <prvAddCurrentTaskToDelayedList+0x94>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f7fe fb9f 	bl	8001b7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d202      	bcs.n	800344c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000bc0 	.word	0x20000bc0
 8003458:	200006e8 	.word	0x200006e8
 800345c:	20000ba8 	.word	0x20000ba8
 8003460:	20000b78 	.word	0x20000b78
 8003464:	20000b74 	.word	0x20000b74
 8003468:	20000bdc 	.word	0x20000bdc

0800346c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003476:	f000 fac3 	bl	8003a00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800347a:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <xTimerCreateTimerTask+0x80>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d021      	beq.n	80034c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800348a:	1d3a      	adds	r2, r7, #4
 800348c:	f107 0108 	add.w	r1, r7, #8
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe fb05 	bl	8001aa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	9202      	str	r2, [sp, #8]
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2302      	movs	r3, #2
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	460a      	mov	r2, r1
 80034ac:	4910      	ldr	r1, [pc, #64]	; (80034f0 <xTimerCreateTimerTask+0x84>)
 80034ae:	4811      	ldr	r0, [pc, #68]	; (80034f4 <xTimerCreateTimerTask+0x88>)
 80034b0:	f7ff f8f4 	bl	800269c <xTaskCreateStatic>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <xTimerCreateTimerTask+0x8c>)
 80034b8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80034ba:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <xTimerCreateTimerTask+0x8c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <xTimerCreateTimerTask+0x74>
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	e7fe      	b.n	80034de <xTimerCreateTimerTask+0x72>
	return xReturn;
 80034e0:	697b      	ldr	r3, [r7, #20]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000c18 	.word	0x20000c18
 80034f0:	08004360 	.word	0x08004360
 80034f4:	08003615 	.word	0x08003615
 80034f8:	20000c1c 	.word	0x20000c1c

080034fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <xTimerGenericCommand+0x2c>
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	e7fe      	b.n	8003526 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <xTimerGenericCommand+0x94>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02a      	beq.n	8003586 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b05      	cmp	r3, #5
 8003540:	dc18      	bgt.n	8003574 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003542:	f7ff feb5 	bl	80032b0 <xTaskGetSchedulerState>
 8003546:	4603      	mov	r3, r0
 8003548:	2b02      	cmp	r3, #2
 800354a:	d109      	bne.n	8003560 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <xTimerGenericCommand+0x94>)
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	f107 0110 	add.w	r1, r7, #16
 8003554:	2300      	movs	r3, #0
 8003556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003558:	f7fe fcac 	bl	8001eb4 <xQueueGenericSend>
 800355c:	6278      	str	r0, [r7, #36]	; 0x24
 800355e:	e012      	b.n	8003586 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <xTimerGenericCommand+0x94>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	f107 0110 	add.w	r1, r7, #16
 8003568:	2300      	movs	r3, #0
 800356a:	2200      	movs	r2, #0
 800356c:	f7fe fca2 	bl	8001eb4 <xQueueGenericSend>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24
 8003572:	e008      	b.n	8003586 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <xTimerGenericCommand+0x94>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	f107 0110 	add.w	r1, r7, #16
 800357c:	2300      	movs	r3, #0
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	f7fe fd92 	bl	80020a8 <xQueueGenericSendFromISR>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003588:	4618      	mov	r0, r3
 800358a:	3728      	adds	r7, #40	; 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000c18 	.word	0x20000c18

08003594 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <prvProcessExpiredTimer+0x7c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fb1d 	bl	8001bec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d121      	bne.n	80035fe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	18d1      	adds	r1, r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f000 f8c8 	bl	800375c <prvInsertTimerInActiveList>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80035d2:	2300      	movs	r3, #0
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	2100      	movs	r1, #0
 80035dc:	6978      	ldr	r0, [r7, #20]
 80035de:	f7ff ff8d 	bl	80034fc <xTimerGenericCommand>
 80035e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <prvProcessExpiredTimer+0x6a>
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e7fe      	b.n	80035fc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	4798      	blx	r3
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000c10 	.word	0x20000c10

08003614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f857 	bl	80036d4 <prvGetNextExpireTime>
 8003626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4619      	mov	r1, r3
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f803 	bl	8003638 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003632:	f000 f8d5 	bl	80037e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003636:	e7f1      	b.n	800361c <prvTimerTask+0x8>

08003638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003642:	f7ff fa57 	bl	8002af4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003646:	f107 0308 	add.w	r3, r7, #8
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f866 	bl	800371c <prvSampleTimeNow>
 8003650:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d130      	bne.n	80036ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <prvProcessTimerOrBlockTask+0x3c>
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	429a      	cmp	r2, r3
 8003664:	d806      	bhi.n	8003674 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003666:	f7ff fa53 	bl	8002b10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800366a:	68f9      	ldr	r1, [r7, #12]
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ff91 	bl	8003594 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003672:	e024      	b.n	80036be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <prvProcessTimerOrBlockTask+0x90>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <prvProcessTimerOrBlockTask+0x94>)
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	f7fe ffcb 	bl	8002634 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800369e:	f7ff fa37 	bl	8002b10 <xTaskResumeAll>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <prvProcessTimerOrBlockTask+0x98>)
 80036aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	f3bf 8f6f 	isb	sy
}
 80036b8:	e001      	b.n	80036be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80036ba:	f7ff fa29 	bl	8002b10 <xTaskResumeAll>
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000c14 	.word	0x20000c14
 80036cc:	20000c18 	.word	0x20000c18
 80036d0:	e000ed04 	.word	0xe000ed04

080036d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <prvGetNextExpireTime+0x44>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <prvGetNextExpireTime+0x44>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e001      	b.n	800370a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	20000c10 	.word	0x20000c10

0800371c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003724:	f7ff fa90 	bl	8002c48 <xTaskGetTickCount>
 8003728:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <prvSampleTimeNow+0x3c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d205      	bcs.n	8003740 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003734:	f000 f904 	bl	8003940 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e002      	b.n	8003746 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <prvSampleTimeNow+0x3c>)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800374c:	68fb      	ldr	r3, [r7, #12]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000c20 	.word	0x20000c20

0800375c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	429a      	cmp	r2, r3
 8003780:	d812      	bhi.n	80037a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	1ad2      	subs	r2, r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e01b      	b.n	80037ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <prvInsertTimerInActiveList+0x7c>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3304      	adds	r3, #4
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f7fe f9ea 	bl	8001b7a <vListInsert>
 80037a6:	e012      	b.n	80037ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d206      	bcs.n	80037be <prvInsertTimerInActiveList+0x62>
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e007      	b.n	80037ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <prvInsertTimerInActiveList+0x80>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fe f9d6 	bl	8001b7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80037ce:	697b      	ldr	r3, [r7, #20]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000c14 	.word	0x20000c14
 80037dc:	20000c10 	.word	0x20000c10

080037e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08e      	sub	sp, #56	; 0x38
 80037e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037e6:	e099      	b.n	800391c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da17      	bge.n	800381e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	3304      	adds	r3, #4
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <prvProcessReceivedCommands+0x2e>
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	e7fe      	b.n	800380c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003814:	6850      	ldr	r0, [r2, #4]
 8003816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003818:	6892      	ldr	r2, [r2, #8]
 800381a:	4611      	mov	r1, r2
 800381c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db7a      	blt.n	800391a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	3304      	adds	r3, #4
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe f9d9 	bl	8001bec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800383a:	463b      	mov	r3, r7
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff6d 	bl	800371c <prvSampleTimeNow>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b09      	cmp	r3, #9
 8003848:	d868      	bhi.n	800391c <prvProcessReceivedCommands+0x13c>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <prvProcessReceivedCommands+0x70>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003879 	.word	0x08003879
 8003854:	08003879 	.word	0x08003879
 8003858:	08003879 	.word	0x08003879
 800385c:	0800391d 	.word	0x0800391d
 8003860:	080038d3 	.word	0x080038d3
 8003864:	08003909 	.word	0x08003909
 8003868:	08003879 	.word	0x08003879
 800386c:	08003879 	.word	0x08003879
 8003870:	0800391d 	.word	0x0800391d
 8003874:	080038d3 	.word	0x080038d3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	18d1      	adds	r1, r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003886:	f7ff ff69 	bl	800375c <prvInsertTimerInActiveList>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d045      	beq.n	800391c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003896:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d13d      	bne.n	800391c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	441a      	add	r2, r3
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2300      	movs	r3, #0
 80038ae:	2100      	movs	r1, #0
 80038b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b2:	f7ff fe23 	bl	80034fc <xTimerGenericCommand>
 80038b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d12e      	bne.n	800391c <prvProcessReceivedCommands+0x13c>
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e7fe      	b.n	80038d0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <prvProcessReceivedCommands+0x114>
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e7fe      	b.n	80038f2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	18d1      	adds	r1, r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003902:	f7ff ff2b 	bl	800375c <prvInsertTimerInActiveList>
					break;
 8003906:	e009      	b.n	800391c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8003912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003914:	f000 fbb6 	bl	8004084 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003918:	e000      	b.n	800391c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800391a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <prvProcessReceivedCommands+0x15c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	1d39      	adds	r1, r7, #4
 8003922:	2200      	movs	r2, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fc53 	bl	80021d0 <xQueueReceive>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f af5b 	bne.w	80037e8 <prvProcessReceivedCommands+0x8>
	}
}
 8003932:	bf00      	nop
 8003934:	3730      	adds	r7, #48	; 0x30
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000c18 	.word	0x20000c18

08003940 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003946:	e044      	b.n	80039d2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <prvSwitchTimerLists+0xb8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <prvSwitchTimerLists+0xb8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3304      	adds	r3, #4
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe f943 	bl	8001bec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d12d      	bne.n	80039d2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4413      	add	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	429a      	cmp	r2, r3
 8003986:	d90e      	bls.n	80039a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003994:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <prvSwitchTimerLists+0xb8>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f7fe f8eb 	bl	8001b7a <vListInsert>
 80039a4:	e015      	b.n	80039d2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	2100      	movs	r1, #0
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff fda3 	bl	80034fc <xTimerGenericCommand>
 80039b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <prvSwitchTimerLists+0x92>
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	e7fe      	b.n	80039d0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <prvSwitchTimerLists+0xb8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1b5      	bne.n	8003948 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <prvSwitchTimerLists+0xb8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <prvSwitchTimerLists+0xbc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <prvSwitchTimerLists+0xb8>)
 80039e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80039ea:	4a04      	ldr	r2, [pc, #16]	; (80039fc <prvSwitchTimerLists+0xbc>)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	6013      	str	r3, [r2, #0]
}
 80039f0:	bf00      	nop
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000c10 	.word	0x20000c10
 80039fc:	20000c14 	.word	0x20000c14

08003a00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003a06:	f000 f961 	bl	8003ccc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003a0a:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <prvCheckForValidListAndQueue+0x60>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d120      	bne.n	8003a54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003a12:	4814      	ldr	r0, [pc, #80]	; (8003a64 <prvCheckForValidListAndQueue+0x64>)
 8003a14:	f7fe f860 	bl	8001ad8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003a18:	4813      	ldr	r0, [pc, #76]	; (8003a68 <prvCheckForValidListAndQueue+0x68>)
 8003a1a:	f7fe f85d 	bl	8001ad8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <prvCheckForValidListAndQueue+0x6c>)
 8003a20:	4a10      	ldr	r2, [pc, #64]	; (8003a64 <prvCheckForValidListAndQueue+0x64>)
 8003a22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <prvCheckForValidListAndQueue+0x70>)
 8003a26:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <prvCheckForValidListAndQueue+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <prvCheckForValidListAndQueue+0x74>)
 8003a30:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <prvCheckForValidListAndQueue+0x78>)
 8003a32:	2110      	movs	r1, #16
 8003a34:	200a      	movs	r0, #10
 8003a36:	f7fe f96b 	bl	8001d10 <xQueueGenericCreateStatic>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <prvCheckForValidListAndQueue+0x60>)
 8003a3e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003a40:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <prvCheckForValidListAndQueue+0x60>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <prvCheckForValidListAndQueue+0x60>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	490b      	ldr	r1, [pc, #44]	; (8003a7c <prvCheckForValidListAndQueue+0x7c>)
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fdc8 	bl	80025e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a54:	f000 f968 	bl	8003d28 <vPortExitCritical>
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000c18 	.word	0x20000c18
 8003a64:	20000be8 	.word	0x20000be8
 8003a68:	20000bfc 	.word	0x20000bfc
 8003a6c:	20000c10 	.word	0x20000c10
 8003a70:	20000c14 	.word	0x20000c14
 8003a74:	20000cc4 	.word	0x20000cc4
 8003a78:	20000c24 	.word	0x20000c24
 8003a7c:	08004368 	.word	0x08004368

08003a80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3b04      	subs	r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3b04      	subs	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3b04      	subs	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ab0:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <pxPortInitialiseStack+0x64>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b14      	subs	r3, #20
 8003aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b04      	subs	r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f06f 0202 	mvn.w	r2, #2
 8003ace:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3b20      	subs	r3, #32
 8003ad4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	08003ae9 	.word	0x08003ae9

08003ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <prvTaskExitError+0x50>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d009      	beq.n	8003b10 <prvTaskExitError+0x28>
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	e7fe      	b.n	8003b0e <prvTaskExitError+0x26>
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b22:	bf00      	nop
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0fc      	beq.n	8003b24 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000000c 	.word	0x2000000c
 8003b3c:	00000000 	.word	0x00000000

08003b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <pxCurrentTCBConst2>)
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	6808      	ldr	r0, [r1, #0]
 8003b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	f380 8809 	msr	PSP, r0
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	4770      	bx	lr
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst2>:
 8003b60:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b68:	4808      	ldr	r0, [pc, #32]	; (8003b8c <prvPortStartFirstTask+0x24>)
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f380 8808 	msr	MSP, r0
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8814 	msr	CONTROL, r0
 8003b7a:	b662      	cpsie	i
 8003b7c:	b661      	cpsie	f
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	df00      	svc	0
 8003b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed08 	.word	0xe000ed08

08003b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <xPortStartScheduler+0x118>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a44      	ldr	r2, [pc, #272]	; (8003cac <xPortStartScheduler+0x11c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d109      	bne.n	8003bb4 <xPortStartScheduler+0x24>
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e7fe      	b.n	8003bb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bb4:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <xPortStartScheduler+0x118>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <xPortStartScheduler+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d109      	bne.n	8003bd2 <xPortStartScheduler+0x42>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e7fe      	b.n	8003bd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bd2:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <xPortStartScheduler+0x124>)
 8003bd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <xPortStartScheduler+0x128>)
 8003bf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bfa:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c00:	e009      	b.n	8003c16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003c02:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a2c      	ldr	r2, [pc, #176]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d0ef      	beq.n	8003c02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f1c3 0307 	rsb	r3, r3, #7
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d009      	beq.n	8003c42 <xPortStartScheduler+0xb2>
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	e7fe      	b.n	8003c40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c78:	f000 f8d6 	bl	8003e28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <xPortStartScheduler+0x134>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c82:	f000 f8f5 	bl	8003e70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <xPortStartScheduler+0x138>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a0f      	ldr	r2, [pc, #60]	; (8003cc8 <xPortStartScheduler+0x138>)
 8003c8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c92:	f7ff ff69 	bl	8003b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c96:	f7ff f8a5 	bl	8002de4 <vTaskSwitchContext>
	prvTaskExitError();
 8003c9a:	f7ff ff25 	bl	8003ae8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	e000ed00 	.word	0xe000ed00
 8003cac:	410fc271 	.word	0x410fc271
 8003cb0:	410fc270 	.word	0x410fc270
 8003cb4:	e000e400 	.word	0xe000e400
 8003cb8:	20000d14 	.word	0x20000d14
 8003cbc:	20000d18 	.word	0x20000d18
 8003cc0:	e000ed20 	.word	0xe000ed20
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	e000ef34 	.word	0xe000ef34

08003ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <vPortEnterCritical+0x54>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <vPortEnterCritical+0x54>)
 8003cec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <vPortEnterCritical+0x54>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10e      	bne.n	8003d14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <vPortEnterCritical+0x58>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <vPortEnterCritical+0x48>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	e7fe      	b.n	8003d12 <vPortEnterCritical+0x46>
	}
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	2000000c 	.word	0x2000000c
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <vPortExitCritical+0x22>
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	e7fe      	b.n	8003d48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <vPortExitCritical+0x3e>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c
	...

08003d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d80:	f3ef 8009 	mrs	r0, PSP
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <pxCurrentTCBConst>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f01e 0f10 	tst.w	lr, #16
 8003d90:	bf08      	it	eq
 8003d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	6010      	str	r0, [r2, #0]
 8003d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003da4:	f380 8811 	msr	BASEPRI, r0
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f7ff f818 	bl	8002de4 <vTaskSwitchContext>
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f380 8811 	msr	BASEPRI, r0
 8003dbc:	bc09      	pop	{r0, r3}
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	6808      	ldr	r0, [r1, #0]
 8003dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc6:	f01e 0f10 	tst.w	lr, #16
 8003dca:	bf08      	it	eq
 8003dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003dd0:	f380 8809 	msr	PSP, r0
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst>:
 8003de0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e00:	f7fe ff32 	bl	8002c68 <xTaskIncrementTick>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <xPortSysTickHandler+0x3c>)
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <vPortSetupTimerInterrupt+0x34>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <vPortSetupTimerInterrupt+0x38>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <vPortSetupTimerInterrupt+0x3c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <vPortSetupTimerInterrupt+0x40>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <vPortSetupTimerInterrupt+0x44>)
 8003e46:	3b01      	subs	r3, #1
 8003e48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <vPortSetupTimerInterrupt+0x34>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010
 8003e60:	e000e018 	.word	0xe000e018
 8003e64:	20000000 	.word	0x20000000
 8003e68:	10624dd3 	.word	0x10624dd3
 8003e6c:	e000e014 	.word	0xe000e014

08003e70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e80 <vPortEnableVFP+0x10>
 8003e74:	6801      	ldr	r1, [r0, #0]
 8003e76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e7a:	6001      	str	r1, [r0, #0]
 8003e7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e7e:	bf00      	nop
 8003e80:	e000ed88 	.word	0xe000ed88

08003e84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e8a:	f3ef 8305 	mrs	r3, IPSR
 8003e8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d913      	bls.n	8003ebe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <vPortValidateInterruptPriority+0x6c>)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ea0:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <vPortValidateInterruptPriority+0x70>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	7afa      	ldrb	r2, [r7, #11]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d209      	bcs.n	8003ebe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	e7fe      	b.n	8003ebc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <vPortValidateInterruptPriority+0x74>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <vPortValidateInterruptPriority+0x78>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d909      	bls.n	8003ee2 <vPortValidateInterruptPriority+0x5e>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	e7fe      	b.n	8003ee0 <vPortValidateInterruptPriority+0x5c>
	}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000e3f0 	.word	0xe000e3f0
 8003ef4:	20000d14 	.word	0x20000d14
 8003ef8:	e000ed0c 	.word	0xe000ed0c
 8003efc:	20000d18 	.word	0x20000d18

08003f00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f0c:	f7fe fdf2 	bl	8002af4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f10:	4b57      	ldr	r3, [pc, #348]	; (8004070 <pvPortMalloc+0x170>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f18:	f000 f90c 	bl	8004134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f1c:	4b55      	ldr	r3, [pc, #340]	; (8004074 <pvPortMalloc+0x174>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 808c 	bne.w	8004042 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003f30:	2208      	movs	r2, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d013      	beq.n	8003f6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f023 0307 	bic.w	r3, r3, #7
 8003f48:	3308      	adds	r3, #8
 8003f4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <pvPortMalloc+0x6a>
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e7fe      	b.n	8003f68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d068      	beq.n	8004042 <pvPortMalloc+0x142>
 8003f70:	4b41      	ldr	r3, [pc, #260]	; (8004078 <pvPortMalloc+0x178>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d863      	bhi.n	8004042 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f7a:	4b40      	ldr	r3, [pc, #256]	; (800407c <pvPortMalloc+0x17c>)
 8003f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	; (800407c <pvPortMalloc+0x17c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f84:	e004      	b.n	8003f90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d903      	bls.n	8003fa2 <pvPortMalloc+0xa2>
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f1      	bne.n	8003f86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <pvPortMalloc+0x170>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d04a      	beq.n	8004042 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	4413      	add	r3, r2
 8003fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1ad2      	subs	r2, r2, r3
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d91e      	bls.n	800400c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <pvPortMalloc+0xf4>
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e7fe      	b.n	8003ff2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004006:	69b8      	ldr	r0, [r7, #24]
 8004008:	f000 f8f6 	bl	80041f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <pvPortMalloc+0x178>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <pvPortMalloc+0x178>)
 8004018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <pvPortMalloc+0x178>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b18      	ldr	r3, [pc, #96]	; (8004080 <pvPortMalloc+0x180>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d203      	bcs.n	800402e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <pvPortMalloc+0x178>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <pvPortMalloc+0x180>)
 800402c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <pvPortMalloc+0x174>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	431a      	orrs	r2, r3
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004042:	f7fe fd65 	bl	8002b10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <pvPortMalloc+0x164>
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e7fe      	b.n	8004062 <pvPortMalloc+0x162>
	return pvReturn;
 8004064:	69fb      	ldr	r3, [r7, #28]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3728      	adds	r7, #40	; 0x28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20004924 	.word	0x20004924
 8004074:	20004930 	.word	0x20004930
 8004078:	20004928 	.word	0x20004928
 800407c:	2000491c 	.word	0x2000491c
 8004080:	2000492c 	.word	0x2000492c

08004084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d046      	beq.n	8004124 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004096:	2308      	movs	r3, #8
 8004098:	425b      	negs	r3, r3
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4413      	add	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	4b20      	ldr	r3, [pc, #128]	; (800412c <vPortFree+0xa8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <vPortFree+0x42>
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	e7fe      	b.n	80040c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <vPortFree+0x5e>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	e7fe      	b.n	80040e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <vPortFree+0xa8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d019      	beq.n	8004124 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d115      	bne.n	8004124 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <vPortFree+0xa8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004108:	f7fe fcf4 	bl	8002af4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <vPortFree+0xac>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4413      	add	r3, r2
 8004116:	4a06      	ldr	r2, [pc, #24]	; (8004130 <vPortFree+0xac>)
 8004118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800411a:	6938      	ldr	r0, [r7, #16]
 800411c:	f000 f86c 	bl	80041f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004120:	f7fe fcf6 	bl	8002b10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004124:	bf00      	nop
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20004930 	.word	0x20004930
 8004130:	20004928 	.word	0x20004928

08004134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800413a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800413e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <prvHeapInit+0xac>)
 8004142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3307      	adds	r3, #7
 8004152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <prvHeapInit+0xac>)
 8004164:	4413      	add	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <prvHeapInit+0xb0>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <prvHeapInit+0xb0>)
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4413      	add	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004180:	2208      	movs	r2, #8
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0307 	bic.w	r3, r3, #7
 800418e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <prvHeapInit+0xb4>)
 8004194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <prvHeapInit+0xb4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <prvHeapInit+0xb4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <prvHeapInit+0xb4>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <prvHeapInit+0xb8>)
 80041c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <prvHeapInit+0xbc>)
 80041ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <prvHeapInit+0xc0>)
 80041ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000d1c 	.word	0x20000d1c
 80041e4:	2000491c 	.word	0x2000491c
 80041e8:	20004924 	.word	0x20004924
 80041ec:	2000492c 	.word	0x2000492c
 80041f0:	20004928 	.word	0x20004928
 80041f4:	20004930 	.word	0x20004930

080041f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <prvInsertBlockIntoFreeList+0xac>)
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e002      	b.n	800420c <prvInsertBlockIntoFreeList+0x14>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d8f7      	bhi.n	8004206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4413      	add	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	d108      	bne.n	800423a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	441a      	add	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d118      	bne.n	8004280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d00d      	beq.n	8004276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	441a      	add	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e008      	b.n	8004288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e003      	b.n	8004288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d002      	beq.n	8004296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000491c 	.word	0x2000491c
 80042a8:	20004924 	.word	0x20004924

080042ac <__libc_init_array>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	4e0d      	ldr	r6, [pc, #52]	; (80042e4 <__libc_init_array+0x38>)
 80042b0:	4c0d      	ldr	r4, [pc, #52]	; (80042e8 <__libc_init_array+0x3c>)
 80042b2:	1ba4      	subs	r4, r4, r6
 80042b4:	10a4      	asrs	r4, r4, #2
 80042b6:	2500      	movs	r5, #0
 80042b8:	42a5      	cmp	r5, r4
 80042ba:	d109      	bne.n	80042d0 <__libc_init_array+0x24>
 80042bc:	4e0b      	ldr	r6, [pc, #44]	; (80042ec <__libc_init_array+0x40>)
 80042be:	4c0c      	ldr	r4, [pc, #48]	; (80042f0 <__libc_init_array+0x44>)
 80042c0:	f000 f82c 	bl	800431c <_init>
 80042c4:	1ba4      	subs	r4, r4, r6
 80042c6:	10a4      	asrs	r4, r4, #2
 80042c8:	2500      	movs	r5, #0
 80042ca:	42a5      	cmp	r5, r4
 80042cc:	d105      	bne.n	80042da <__libc_init_array+0x2e>
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042d4:	4798      	blx	r3
 80042d6:	3501      	adds	r5, #1
 80042d8:	e7ee      	b.n	80042b8 <__libc_init_array+0xc>
 80042da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042de:	4798      	blx	r3
 80042e0:	3501      	adds	r5, #1
 80042e2:	e7f2      	b.n	80042ca <__libc_init_array+0x1e>
 80042e4:	080043e8 	.word	0x080043e8
 80042e8:	080043e8 	.word	0x080043e8
 80042ec:	080043e8 	.word	0x080043e8
 80042f0:	080043ec 	.word	0x080043ec

080042f4 <memcpy>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	1e43      	subs	r3, r0, #1
 80042f8:	440a      	add	r2, r1
 80042fa:	4291      	cmp	r1, r2
 80042fc:	d100      	bne.n	8004300 <memcpy+0xc>
 80042fe:	bd10      	pop	{r4, pc}
 8004300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004308:	e7f7      	b.n	80042fa <memcpy+0x6>

0800430a <memset>:
 800430a:	4402      	add	r2, r0
 800430c:	4603      	mov	r3, r0
 800430e:	4293      	cmp	r3, r2
 8004310:	d100      	bne.n	8004314 <memset+0xa>
 8004312:	4770      	bx	lr
 8004314:	f803 1b01 	strb.w	r1, [r3], #1
 8004318:	e7f9      	b.n	800430e <memset+0x4>
	...

0800431c <_init>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr

08004328 <_fini>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr
