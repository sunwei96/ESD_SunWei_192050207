
project_lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc4  08004cc4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ccc  08004ccc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000498c  20000010  08004ce4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000499c  08004ce4  0002499c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010489  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000218c  00000000  00000000  000304c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  00032658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  000331c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002243  00000000  00000000  00033c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a650  00000000  00000000  00035e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6e09  00000000  00000000  000404d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001172dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df8  00000000  00000000  00117358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b8c 	.word	0x08004b8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004b8c 	.word	0x08004b8c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa58 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f874 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8d2 	bl	80006a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000500:	f001 f990 	bl	8001824 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000504:	4a25      	ldr	r2, [pc, #148]	; (800059c <main+0xac>)
 8000506:	2101      	movs	r1, #1
 8000508:	2001      	movs	r0, #1
 800050a:	f001 facb 	bl	8001aa4 <osSemaphoreNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <main+0xb0>)
 8000512:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, sizeof(uint16_t), &myQueue01_attributes);
 8000514:	4a23      	ldr	r2, [pc, #140]	; (80005a4 <main+0xb4>)
 8000516:	2102      	movs	r1, #2
 8000518:	200a      	movs	r0, #10
 800051a:	f001 fb61 	bl	8001be0 <osMessageQueueNew>
 800051e:	4602      	mov	r2, r0
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <main+0xb8>)
 8000522:	601a      	str	r2, [r3, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (10, sizeof(uint16_t), &myQueue02_attributes);
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <main+0xbc>)
 8000526:	2102      	movs	r1, #2
 8000528:	200a      	movs	r0, #10
 800052a:	f001 fb59 	bl	8001be0 <osMessageQueueNew>
 800052e:	4602      	mov	r2, r0
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <main+0xc0>)
 8000532:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <main+0xc4>)
 8000536:	2100      	movs	r1, #0
 8000538:	481f      	ldr	r0, [pc, #124]	; (80005b8 <main+0xc8>)
 800053a:	f001 f9db 	bl	80018f4 <osThreadNew>
 800053e:	4602      	mov	r2, r0
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <main+0xcc>)
 8000542:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000544:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <main+0xd0>)
 8000546:	2100      	movs	r1, #0
 8000548:	481e      	ldr	r0, [pc, #120]	; (80005c4 <main+0xd4>)
 800054a:	f001 f9d3 	bl	80018f4 <osThreadNew>
 800054e:	4602      	mov	r2, r0
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <main+0xd8>)
 8000552:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000554:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <main+0xdc>)
 8000556:	2100      	movs	r1, #0
 8000558:	481d      	ldr	r0, [pc, #116]	; (80005d0 <main+0xe0>)
 800055a:	f001 f9cb 	bl	80018f4 <osThreadNew>
 800055e:	4602      	mov	r2, r0
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <main+0xe4>)
 8000562:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  //create queue
  xQueue1 = xQueueCreate(10, sizeof(unsigned int));
 8000564:	2200      	movs	r2, #0
 8000566:	2104      	movs	r1, #4
 8000568:	200a      	movs	r0, #10
 800056a:	f001 fd81 	bl	8002070 <xQueueGenericCreate>
 800056e:	4602      	mov	r2, r0
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <main+0xe8>)
 8000572:	601a      	str	r2, [r3, #0]
  xQueue2 = xQueueCreate(10, sizeof(unsigned int));
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	200a      	movs	r0, #10
 800057a:	f001 fd79 	bl	8002070 <xQueueGenericCreate>
 800057e:	4602      	mov	r2, r0
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <main+0xec>)
 8000582:	601a      	str	r2, [r3, #0]

  //create Semaphore
  xSemaphore = xSemaphoreCreateBinary();
 8000584:	2203      	movs	r2, #3
 8000586:	2100      	movs	r1, #0
 8000588:	2001      	movs	r0, #1
 800058a:	f001 fd71 	bl	8002070 <xQueueGenericCreate>
 800058e:	4602      	mov	r2, r0
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <main+0xf0>)
 8000592:	601a      	str	r2, [r3, #0]

  /* Start scheduler */
  osKernelStart();
 8000594:	f001 f97a 	bl	800188c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0xa8>
 800059a:	bf00      	nop
 800059c:	08004ca4 	.word	0x08004ca4
 80005a0:	20004944 	.word	0x20004944
 80005a4:	08004c74 	.word	0x08004c74
 80005a8:	2000494c 	.word	0x2000494c
 80005ac:	08004c8c 	.word	0x08004c8c
 80005b0:	20004954 	.word	0x20004954
 80005b4:	08004c08 	.word	0x08004c08
 80005b8:	08000709 	.word	0x08000709
 80005bc:	20004934 	.word	0x20004934
 80005c0:	08004c2c 	.word	0x08004c2c
 80005c4:	08000781 	.word	0x08000781
 80005c8:	20004940 	.word	0x20004940
 80005cc:	08004c50 	.word	0x08004c50
 80005d0:	080007f9 	.word	0x080007f9
 80005d4:	20004948 	.word	0x20004948
 80005d8:	20004950 	.word	0x20004950
 80005dc:	2000493c 	.word	0x2000493c
 80005e0:	20004938 	.word	0x20004938

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fac1 	bl	8004b7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xb8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <SystemClock_Config+0xb8>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <SystemClock_Config+0xb8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemClock_Config+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <SystemClock_Config+0xbc>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemClock_Config+0xbc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fcdb 	bl	8001014 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000664:	f000 f904 	bl	8000870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 ff36 	bl	80014f4 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800068e:	f000 f8ef 	bl	8000870 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_GPIO_Init+0x5c>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_GPIO_Init+0x5c>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_GPIO_Init+0x5c>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	f003 0302 	and.w	r3, r3, #2
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <MX_GPIO_Init+0x60>)
 80006da:	f000 fc67 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006de:	2301      	movs	r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0x60>)
 80006f4:	f000 fab0 	bl	8000c58 <HAL_GPIO_Init>

}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400

08000708 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  unsigned int counter = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  xQueueSendToBack(xQueue1, (void *)&counter, portMAX_DELAY );
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <StartDefaultTask+0x70>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	f107 010c 	add.w	r1, r7, #12
 800071c:	2300      	movs	r3, #0
 800071e:	f04f 32ff 	mov.w	r2, #4294967295
 8000722:	f001 fd6b 	bl	80021fc <xQueueGenericSend>
	  osDelay(1000);
 8000726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072a:	f001 f98d 	bl	8001a48 <osDelay>
	  xQueueSendToBack(xQueue2, (void *)&counter, portMAX_DELAY );
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <StartDefaultTask+0x74>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	f107 010c 	add.w	r1, r7, #12
 8000736:	2300      	movs	r3, #0
 8000738:	f04f 32ff 	mov.w	r2, #4294967295
 800073c:	f001 fd5e 	bl	80021fc <xQueueGenericSend>
	  osDelay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f001 f980 	bl	8001a48 <osDelay>
	  if(uxQueueSpacesAvailable(xQueue1) > 0 || uxQueueSpacesAvailable(xQueue2) > 0){
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <StartDefaultTask+0x70>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f8e4 	bl	800291a <uxQueueSpacesAvailable>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d107      	bne.n	8000768 <StartDefaultTask+0x60>
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <StartDefaultTask+0x74>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f002 f8dc 	bl	800291a <uxQueueSpacesAvailable>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <StartDefaultTask+0x68>
		  counter++;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	e002      	b.n	8000776 <StartDefaultTask+0x6e>
	  }
	  else{
		  vTaskDelay(200);
 8000770:	20c8      	movs	r0, #200	; 0xc8
 8000772:	f002 fc59 	bl	8003028 <vTaskDelay>
	  xQueueSendToBack(xQueue1, (void *)&counter, portMAX_DELAY );
 8000776:	e7cd      	b.n	8000714 <StartDefaultTask+0xc>
 8000778:	20004950 	.word	0x20004950
 800077c:	2000493c 	.word	0x2000493c

08000780 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  unsigned int ReceivedCounter;
  for(;;)
  {
	if(uxQueueMessagesWaiting(xQueue1) > 1){
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <StartTask02+0x6c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f8a7 	bl	80028e0 <uxQueueMessagesWaiting>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	d9f7      	bls.n	8000788 <StartTask02+0x8>
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <StartTask02+0x70>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f04f 31ff 	mov.w	r1, #4294967295
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 ff95 	bl	80026d0 <xQueueSemaphoreTake>
		xQueueReceive(xQueue1, &ReceivedCounter, portMAX_DELAY);
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <StartTask02+0x6c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f107 0108 	add.w	r1, r7, #8
 80007ae:	f04f 32ff 	mov.w	r2, #4294967295
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 feb0 	bl	8002518 <xQueueReceive>
		for(int i = 0; i <= ReceivedCounter; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	e00a      	b.n	80007d4 <StartTask02+0x54>
		{
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80007be:	2101      	movs	r1, #1
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <StartTask02+0x74>)
 80007c2:	f000 fc0c 	bl	8000fde <HAL_GPIO_TogglePin>
			osDelay(450);
 80007c6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80007ca:	f001 f93d 	bl	8001a48 <osDelay>
		for(int i = 0; i <= ReceivedCounter; i++)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d9f0      	bls.n	80007be <StartTask02+0x3e>
//			osDelay(900);
		}
		xSemaphoreGive(xSemaphore);
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <StartTask02+0x70>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	f001 fd09 	bl	80021fc <xQueueGenericSend>
	if(uxQueueMessagesWaiting(xQueue1) > 1){
 80007ea:	e7cd      	b.n	8000788 <StartTask02+0x8>
 80007ec:	20004950 	.word	0x20004950
 80007f0:	20004938 	.word	0x20004938
 80007f4:	40020400 	.word	0x40020400

080007f8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	unsigned int ReceivedCounter;
	for(;;)
	{
		if(uxQueueMessagesWaiting(xQueue2) > 1){
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <StartTask03+0x6c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f002 f86b 	bl	80028e0 <uxQueueMessagesWaiting>
 800080a:	4603      	mov	r3, r0
 800080c:	2b01      	cmp	r3, #1
 800080e:	d921      	bls.n	8000854 <StartTask03+0x5c>
			xSemaphoreTake(xSemaphore, portMAX_DELAY);
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <StartTask03+0x70>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	4618      	mov	r0, r3
 800081a:	f001 ff59 	bl	80026d0 <xQueueSemaphoreTake>
			xQueueReceive(xQueue2, &ReceivedCounter, portMAX_DELAY);
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <StartTask03+0x6c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f107 0108 	add.w	r1, r7, #8
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fe74 	bl	8002518 <xQueueReceive>
			for(int i = 0; i <= ReceivedCounter; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	e00a      	b.n	800084c <StartTask03+0x54>
			{
				HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000836:	2101      	movs	r1, #1
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <StartTask03+0x74>)
 800083a:	f000 fbd0 	bl	8000fde <HAL_GPIO_TogglePin>
				osDelay(450);
 800083e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000842:	f001 f901 	bl	8001a48 <osDelay>
			for(int i = 0; i <= ReceivedCounter; i++)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	429a      	cmp	r2, r3
 8000852:	d9f0      	bls.n	8000836 <StartTask03+0x3e>
//				osDelay(900);
			}
		}
		xSemaphoreGive(xSemaphore);
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <StartTask03+0x70>)
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	f001 fccd 	bl	80021fc <xQueueGenericSend>
		if(uxQueueMessagesWaiting(xQueue2) > 1){
 8000862:	e7cd      	b.n	8000800 <StartTask03+0x8>
 8000864:	2000493c 	.word	0x2000493c
 8000868:	20004938 	.word	0x20004938
 800086c:	40020400 	.word	0x40020400

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <HAL_MspInit+0x54>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x54>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_MspInit+0x54>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_MspInit+0x54>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	210f      	movs	r1, #15
 80008c2:	f06f 0001 	mvn.w	r0, #1
 80008c6:	f000 f99e 	bl	8000c06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f89c 	bl	8000a4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000914:	f002 fffe 	bl	8003914 <xTaskGetSchedulerState>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d001      	beq.n	8000922 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800091e:	f003 fe9b 	bl	8004658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <SystemInit+0x28>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <SystemInit+0x28>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SystemInit+0x28>)
 800093e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000942:	609a      	str	r2, [r3, #8]
#endif
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000958:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800095a:	e003      	b.n	8000964 <LoopCopyDataInit>

0800095c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800095e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000960:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000962:	3104      	adds	r1, #4

08000964 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000968:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800096c:	d3f6      	bcc.n	800095c <CopyDataInit>
  ldr  r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000970:	e002      	b.n	8000978 <LoopFillZerobss>

08000972 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000972:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000974:	f842 3b04 	str.w	r3, [r2], #4

08000978 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800097a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800097c:	d3f9      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800097e:	f7ff ffd3 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f004 f8cb 	bl	8004b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fdb3 	bl	80004f0 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800098c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000990:	08004cd4 	.word	0x08004cd4
  ldr  r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000998:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800099c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80009a0:	2000499c 	.word	0x2000499c

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_Init+0x40>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_Init+0x40>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_Init+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f90d 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	200f      	movs	r0, #15
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff ff50 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f917 	bl	8000c3e <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f8ed 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20004958 	.word	0x20004958

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20004958 	.word	0x20004958

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff47 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff5c 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffb0 	bl	8000bac <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e177      	b.n	8000f64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 8166 	bne.w	8000f5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d00b      	beq.n	8000cb2 <HAL_GPIO_Init+0x5a>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d007      	beq.n	8000cb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca6:	2b11      	cmp	r3, #17
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0xfc>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b12      	cmp	r3, #18
 8000d52:	d123      	bne.n	8000d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	69b9      	ldr	r1, [r7, #24]
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0203 	and.w	r2, r3, #3
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80c0 	beq.w	8000f5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b65      	ldr	r3, [pc, #404]	; (8000f78 <HAL_GPIO_Init+0x320>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a64      	ldr	r2, [pc, #400]	; (8000f78 <HAL_GPIO_Init+0x320>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b62      	ldr	r3, [pc, #392]	; (8000f78 <HAL_GPIO_Init+0x320>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a60      	ldr	r2, [pc, #384]	; (8000f7c <HAL_GPIO_Init+0x324>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a57      	ldr	r2, [pc, #348]	; (8000f80 <HAL_GPIO_Init+0x328>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d037      	beq.n	8000e96 <HAL_GPIO_Init+0x23e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a56      	ldr	r2, [pc, #344]	; (8000f84 <HAL_GPIO_Init+0x32c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d031      	beq.n	8000e92 <HAL_GPIO_Init+0x23a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a55      	ldr	r2, [pc, #340]	; (8000f88 <HAL_GPIO_Init+0x330>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d02b      	beq.n	8000e8e <HAL_GPIO_Init+0x236>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a54      	ldr	r2, [pc, #336]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x232>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a53      	ldr	r2, [pc, #332]	; (8000f90 <HAL_GPIO_Init+0x338>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x22e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a52      	ldr	r2, [pc, #328]	; (8000f94 <HAL_GPIO_Init+0x33c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x22a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a51      	ldr	r2, [pc, #324]	; (8000f98 <HAL_GPIO_Init+0x340>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x226>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <HAL_GPIO_Init+0x344>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x222>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4f      	ldr	r2, [pc, #316]	; (8000fa0 <HAL_GPIO_Init+0x348>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x21e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4e      	ldr	r2, [pc, #312]	; (8000fa4 <HAL_GPIO_Init+0x34c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x21a>
 8000e6e:	2309      	movs	r3, #9
 8000e70:	e012      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e72:	230a      	movs	r3, #10
 8000e74:	e010      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e76:	2308      	movs	r3, #8
 8000e78:	e00e      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e00c      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e00a      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e008      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e004      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e96:	2300      	movs	r3, #0
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	f002 0203 	and.w	r2, r2, #3
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	4093      	lsls	r3, r2
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea8:	4934      	ldr	r1, [pc, #208]	; (8000f7c <HAL_GPIO_Init+0x324>)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eda:	4a33      	ldr	r2, [pc, #204]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee0:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f58:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	f67f ae84 	bls.w	8000c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3724      	adds	r7, #36	; 0x24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40013800 	.word	0x40013800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40021c00 	.word	0x40021c00
 8000fa0:	40022000 	.word	0x40022000
 8000fa4:	40022400 	.word	0x40022400
 8000fa8:	40013c00 	.word	0x40013c00

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc8:	e003      	b.n	8000fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	041a      	lsls	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	619a      	str	r2, [r3, #24]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d104      	bne.n	8001002 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	041a      	lsls	r2, r3, #16
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001000:	e002      	b.n	8001008 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e25b      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d075      	beq.n	800111e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001032:	4ba3      	ldr	r3, [pc, #652]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b04      	cmp	r3, #4
 800103c:	d00c      	beq.n	8001058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103e:	4ba0      	ldr	r3, [pc, #640]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001046:	2b08      	cmp	r3, #8
 8001048:	d112      	bne.n	8001070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104a:	4b9d      	ldr	r3, [pc, #628]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001056:	d10b      	bne.n	8001070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	4b99      	ldr	r3, [pc, #612]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d05b      	beq.n	800111c <HAL_RCC_OscConfig+0x108>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d157      	bne.n	800111c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e236      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001078:	d106      	bne.n	8001088 <HAL_RCC_OscConfig+0x74>
 800107a:	4b91      	ldr	r3, [pc, #580]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a90      	ldr	r2, [pc, #576]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e01d      	b.n	80010c4 <HAL_RCC_OscConfig+0xb0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0x98>
 8001092:	4b8b      	ldr	r3, [pc, #556]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a8a      	ldr	r2, [pc, #552]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b88      	ldr	r3, [pc, #544]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a87      	ldr	r2, [pc, #540]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xb0>
 80010ac:	4b84      	ldr	r3, [pc, #528]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a83      	ldr	r2, [pc, #524]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b81      	ldr	r3, [pc, #516]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a80      	ldr	r2, [pc, #512]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fcd2 	bl	8000a74 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fcce 	bl	8000a74 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1fb      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0xc0>
 80010f2:	e014      	b.n	800111e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fcbe 	bl	8000a74 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fcba 	bl	8000a74 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e1e7      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	4b6c      	ldr	r3, [pc, #432]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0xe8>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d063      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800112a:	4b65      	ldr	r3, [pc, #404]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001136:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800113e:	2b08      	cmp	r3, #8
 8001140:	d11c      	bne.n	800117c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001142:	4b5f      	ldr	r3, [pc, #380]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d116      	bne.n	800117c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	4b5c      	ldr	r3, [pc, #368]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <HAL_RCC_OscConfig+0x152>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e1bb      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4952      	ldr	r1, [pc, #328]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	e03a      	b.n	80011f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b4f      	ldr	r3, [pc, #316]	; (80012c4 <HAL_RCC_OscConfig+0x2b0>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff fc73 	bl	8000a74 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fc6f 	bl	8000a74 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e19c      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4940      	ldr	r1, [pc, #256]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e015      	b.n	80011f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c6:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <HAL_RCC_OscConfig+0x2b0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc52 	bl	8000a74 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc4e 	bl	8000a74 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e17b      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d030      	beq.n	8001260 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d016      	beq.n	8001234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_RCC_OscConfig+0x2b4>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fc32 	bl	8000a74 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fc2e 	bl	8000a74 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e15b      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0x200>
 8001232:	e015      	b.n	8001260 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_RCC_OscConfig+0x2b4>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fc1b 	bl	8000a74 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001242:	f7ff fc17 	bl	8000a74 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e144      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80a0 	beq.w	80013ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10f      	bne.n	800129e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_RCC_OscConfig+0x2b8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d121      	bne.n	80012ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_RCC_OscConfig+0x2b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_RCC_OscConfig+0x2b8>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fbdd 	bl	8000a74 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e011      	b.n	80012e2 <HAL_RCC_OscConfig+0x2ce>
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	42470000 	.word	0x42470000
 80012c8:	42470e80 	.word	0x42470e80
 80012cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d0:	f7ff fbd0 	bl	8000a74 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e0fd      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e2:	4b81      	ldr	r3, [pc, #516]	; (80014e8 <HAL_RCC_OscConfig+0x4d4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d106      	bne.n	8001304 <HAL_RCC_OscConfig+0x2f0>
 80012f6:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	4a7c      	ldr	r2, [pc, #496]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6713      	str	r3, [r2, #112]	; 0x70
 8001302:	e01c      	b.n	800133e <HAL_RCC_OscConfig+0x32a>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b05      	cmp	r3, #5
 800130a:	d10c      	bne.n	8001326 <HAL_RCC_OscConfig+0x312>
 800130c:	4b77      	ldr	r3, [pc, #476]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	4a76      	ldr	r2, [pc, #472]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6713      	str	r3, [r2, #112]	; 0x70
 8001318:	4b74      	ldr	r3, [pc, #464]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 800131a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131c:	4a73      	ldr	r2, [pc, #460]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6713      	str	r3, [r2, #112]	; 0x70
 8001324:	e00b      	b.n	800133e <HAL_RCC_OscConfig+0x32a>
 8001326:	4b71      	ldr	r3, [pc, #452]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132a:	4a70      	ldr	r2, [pc, #448]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	6713      	str	r3, [r2, #112]	; 0x70
 8001332:	4b6e      	ldr	r3, [pc, #440]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 8001334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001336:	4a6d      	ldr	r2, [pc, #436]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 8001338:	f023 0304 	bic.w	r3, r3, #4
 800133c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d015      	beq.n	8001372 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001346:	f7ff fb95 	bl	8000a74 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff fb91 	bl	8000a74 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	; 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e0bc      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001364:	4b61      	ldr	r3, [pc, #388]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0ee      	beq.n	800134e <HAL_RCC_OscConfig+0x33a>
 8001370:	e014      	b.n	800139c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001372:	f7ff fb7f 	bl	8000a74 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001378:	e00a      	b.n	8001390 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff fb7b 	bl	8000a74 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f241 3288 	movw	r2, #5000	; 0x1388
 8001388:	4293      	cmp	r3, r2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e0a6      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1ee      	bne.n	800137a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d105      	bne.n	80013ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a2:	4b52      	ldr	r3, [pc, #328]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a51      	ldr	r2, [pc, #324]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 80013a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8092 	beq.w	80014dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b8:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d05c      	beq.n	800147e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d141      	bne.n	8001450 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013cc:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <HAL_RCC_OscConfig+0x4dc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb4f 	bl	8000a74 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fb4b 	bl	8000a74 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e078      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ec:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69da      	ldr	r2, [r3, #28]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	019b      	lsls	r3, r3, #6
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	085b      	lsrs	r3, r3, #1
 8001410:	3b01      	subs	r3, #1
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	061b      	lsls	r3, r3, #24
 800141c:	4933      	ldr	r1, [pc, #204]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <HAL_RCC_OscConfig+0x4dc>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb24 	bl	8000a74 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb20 	bl	8000a74 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e04d      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x41c>
 800144e:	e045      	b.n	80014dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_RCC_OscConfig+0x4dc>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fb0d 	bl	8000a74 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff fb09 	bl	8000a74 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e036      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x44a>
 800147c:	e02e      	b.n	80014dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e029      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_RCC_OscConfig+0x4d8>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	429a      	cmp	r2, r3
 800149c:	d11c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d115      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b2:	4013      	ands	r3, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d10d      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d106      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40007000 	.word	0x40007000
 80014ec:	40023800 	.word	0x40023800
 80014f0:	42470060 	.word	0x42470060

080014f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0cc      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001508:	4b68      	ldr	r3, [pc, #416]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d90c      	bls.n	8001530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b65      	ldr	r3, [pc, #404]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0b8      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001548:	4b59      	ldr	r3, [pc, #356]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001560:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800156a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	494d      	ldr	r1, [pc, #308]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d044      	beq.n	8001614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d119      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e06f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e067      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f023 0203 	bic.w	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4934      	ldr	r1, [pc, #208]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff fa46 	bl	8000a74 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ec:	f7ff fa42 	bl	8000a74 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e04f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 020c 	and.w	r2, r3, #12
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	429a      	cmp	r2, r3
 8001612:	d1eb      	bne.n	80015ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d20c      	bcs.n	800163c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e032      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4916      	ldr	r1, [pc, #88]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	490e      	ldr	r1, [pc, #56]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167a:	f000 f821 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 800167e:	4601      	mov	r1, r0
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	fa21 f303 	lsr.w	r3, r1, r3
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f9a6 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00
 80016b0:	40023800 	.word	0x40023800
 80016b4:	08004cb4 	.word	0x08004cb4
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016d6:	4b50      	ldr	r3, [pc, #320]	; (8001818 <HAL_RCC_GetSysClockFreq+0x158>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d007      	beq.n	80016f2 <HAL_RCC_GetSysClockFreq+0x32>
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d008      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x38>
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 808d 	bne.w	8001806 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016ec:	4b4b      	ldr	r3, [pc, #300]	; (800181c <HAL_RCC_GetSysClockFreq+0x15c>)
 80016ee:	60bb      	str	r3, [r7, #8]
       break;
 80016f0:	e08c      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016f2:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <HAL_RCC_GetSysClockFreq+0x160>)
 80016f4:	60bb      	str	r3, [r7, #8]
      break;
 80016f6:	e089      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f8:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_GetSysClockFreq+0x158>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001700:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <HAL_RCC_GetSysClockFreq+0x158>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d023      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170e:	4b42      	ldr	r3, [pc, #264]	; (8001818 <HAL_RCC_GetSysClockFreq+0x158>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	099b      	lsrs	r3, r3, #6
 8001714:	f04f 0400 	mov.w	r4, #0
 8001718:	f240 11ff 	movw	r1, #511	; 0x1ff
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	ea03 0501 	and.w	r5, r3, r1
 8001724:	ea04 0602 	and.w	r6, r4, r2
 8001728:	4a3d      	ldr	r2, [pc, #244]	; (8001820 <HAL_RCC_GetSysClockFreq+0x160>)
 800172a:	fb02 f106 	mul.w	r1, r2, r6
 800172e:	2200      	movs	r2, #0
 8001730:	fb02 f205 	mul.w	r2, r2, r5
 8001734:	440a      	add	r2, r1
 8001736:	493a      	ldr	r1, [pc, #232]	; (8001820 <HAL_RCC_GetSysClockFreq+0x160>)
 8001738:	fba5 0101 	umull	r0, r1, r5, r1
 800173c:	1853      	adds	r3, r2, r1
 800173e:	4619      	mov	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f04f 0400 	mov.w	r4, #0
 8001746:	461a      	mov	r2, r3
 8001748:	4623      	mov	r3, r4
 800174a:	f7fe fd51 	bl	80001f0 <__aeabi_uldivmod>
 800174e:	4603      	mov	r3, r0
 8001750:	460c      	mov	r4, r1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e049      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_RCC_GetSysClockFreq+0x158>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	ea03 0501 	and.w	r5, r3, r1
 800176c:	ea04 0602 	and.w	r6, r4, r2
 8001770:	4629      	mov	r1, r5
 8001772:	4632      	mov	r2, r6
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	f04f 0400 	mov.w	r4, #0
 800177c:	0154      	lsls	r4, r2, #5
 800177e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001782:	014b      	lsls	r3, r1, #5
 8001784:	4619      	mov	r1, r3
 8001786:	4622      	mov	r2, r4
 8001788:	1b49      	subs	r1, r1, r5
 800178a:	eb62 0206 	sbc.w	r2, r2, r6
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f04f 0400 	mov.w	r4, #0
 8001796:	0194      	lsls	r4, r2, #6
 8001798:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800179c:	018b      	lsls	r3, r1, #6
 800179e:	1a5b      	subs	r3, r3, r1
 80017a0:	eb64 0402 	sbc.w	r4, r4, r2
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	00e2      	lsls	r2, r4, #3
 80017ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017b2:	00d9      	lsls	r1, r3, #3
 80017b4:	460b      	mov	r3, r1
 80017b6:	4614      	mov	r4, r2
 80017b8:	195b      	adds	r3, r3, r5
 80017ba:	eb44 0406 	adc.w	r4, r4, r6
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	02a2      	lsls	r2, r4, #10
 80017c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017cc:	0299      	lsls	r1, r3, #10
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	4621      	mov	r1, r4
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f04f 0400 	mov.w	r4, #0
 80017dc:	461a      	mov	r2, r3
 80017de:	4623      	mov	r3, r4
 80017e0:	f7fe fd06 	bl	80001f0 <__aeabi_uldivmod>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_GetSysClockFreq+0x158>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	0c1b      	lsrs	r3, r3, #16
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	3301      	adds	r3, #1
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	60bb      	str	r3, [r7, #8]
      break;
 8001804:	e002      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001808:	60bb      	str	r3, [r7, #8]
      break;
 800180a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180c:	68bb      	ldr	r3, [r7, #8]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	00f42400 	.word	0x00f42400
 8001820:	017d7840 	.word	0x017d7840

08001824 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800182a:	f3ef 8305 	mrs	r3, IPSR
 800182e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001836:	f3ef 8310 	mrs	r3, PRIMASK
 800183a:	607b      	str	r3, [r7, #4]
  return(result);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <osKernelInitialize+0x32>
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <osKernelInitialize+0x64>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d109      	bne.n	800185e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800184a:	f3ef 8311 	mrs	r3, BASEPRI
 800184e:	603b      	str	r3, [r7, #0]
  return(result);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001856:	f06f 0305 	mvn.w	r3, #5
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e00c      	b.n	8001878 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <osKernelInitialize+0x64>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <osKernelInitialize+0x64>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e002      	b.n	8001878 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001878:	68fb      	ldr	r3, [r7, #12]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000002c 	.word	0x2000002c

0800188c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001892:	f3ef 8305 	mrs	r3, IPSR
 8001896:	60bb      	str	r3, [r7, #8]
  return(result);
 8001898:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800189e:	f3ef 8310 	mrs	r3, PRIMASK
 80018a2:	607b      	str	r3, [r7, #4]
  return(result);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <osKernelStart+0x32>
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <osKernelStart+0x64>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d109      	bne.n	80018c6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018b2:	f3ef 8311 	mrs	r3, BASEPRI
 80018b6:	603b      	str	r3, [r7, #0]
  return(result);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80018be:	f06f 0305 	mvn.w	r3, #5
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e00e      	b.n	80018e4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <osKernelStart+0x64>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <osKernelStart+0x64>)
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80018d4:	f001 fbdc 	bl	8003090 <vTaskStartScheduler>
      stat = osOK;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e002      	b.n	80018e4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80018e4:	68fb      	ldr	r3, [r7, #12]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000002c 	.word	0x2000002c

080018f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b092      	sub	sp, #72	; 0x48
 80018f8:	af04      	add	r7, sp, #16
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001904:	f3ef 8305 	mrs	r3, IPSR
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 8094 	bne.w	8001a3a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001912:	f3ef 8310 	mrs	r3, PRIMASK
 8001916:	623b      	str	r3, [r7, #32]
  return(result);
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 808d 	bne.w	8001a3a <osThreadNew+0x146>
 8001920:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <osThreadNew+0x150>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d106      	bne.n	8001936 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001928:	f3ef 8311 	mrs	r3, BASEPRI
 800192c:	61fb      	str	r3, [r7, #28]
  return(result);
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f040 8082 	bne.w	8001a3a <osThreadNew+0x146>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d07e      	beq.n	8001a3a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001940:	2318      	movs	r3, #24
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001944:	2300      	movs	r3, #0
 8001946:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001948:	f107 031b 	add.w	r3, r7, #27
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d045      	beq.n	80019e6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <osThreadNew+0x74>
        name = attr->name;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <osThreadNew+0x9a>
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	2b38      	cmp	r3, #56	; 0x38
 8001980:	d805      	bhi.n	800198e <osThreadNew+0x9a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <osThreadNew+0x9e>
        return (NULL);
 800198e:	2300      	movs	r3, #0
 8001990:	e054      	b.n	8001a3c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00e      	beq.n	80019c8 <osThreadNew+0xd4>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b5b      	cmp	r3, #91	; 0x5b
 80019b0:	d90a      	bls.n	80019c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <osThreadNew+0xd4>
        mem = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c6:	e010      	b.n	80019ea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10c      	bne.n	80019ea <osThreadNew+0xf6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <osThreadNew+0xf6>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <osThreadNew+0xf6>
          mem = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e4:	e001      	b.n	80019ea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d110      	bne.n	8001a12 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019f8:	9202      	str	r2, [sp, #8]
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f001 f97a 	bl	8002d00 <xTaskCreateStatic>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e013      	b.n	8001a3a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d110      	bne.n	8001a3a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f001 f9c1 	bl	8002db2 <xTaskCreate>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d001      	beq.n	8001a3a <osThreadNew+0x146>
          hTask = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a3a:	697b      	ldr	r3, [r7, #20]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3738      	adds	r7, #56	; 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000002c 	.word	0x2000002c

08001a48 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a50:	f3ef 8305 	mrs	r3, IPSR
 8001a54:	613b      	str	r3, [r7, #16]
  return(result);
 8001a56:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10f      	bne.n	8001a7c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <osDelay+0x34>
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <osDelay+0x58>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d109      	bne.n	8001a84 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a70:	f3ef 8311 	mrs	r3, BASEPRI
 8001a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <osDelay+0x3c>
    stat = osErrorISR;
 8001a7c:	f06f 0305 	mvn.w	r3, #5
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e007      	b.n	8001a94 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 faca 	bl	8003028 <vTaskDelay>
    }
  }

  return (stat);
 8001a94:	697b      	ldr	r3, [r7, #20]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000002c 	.word	0x2000002c

08001aa4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ab4:	f3ef 8305 	mrs	r3, IPSR
 8001ab8:	61bb      	str	r3, [r7, #24]
  return(result);
 8001aba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 8088 	bne.w	8001bd2 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac6:	617b      	str	r3, [r7, #20]
  return(result);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 8081 	bne.w	8001bd2 <osSemaphoreNew+0x12e>
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <osSemaphoreNew+0x138>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d105      	bne.n	8001ae4 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8001adc:	613b      	str	r3, [r7, #16]
  return(result);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d176      	bne.n	8001bd2 <osSemaphoreNew+0x12e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d073      	beq.n	8001bd2 <osSemaphoreNew+0x12e>
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d86f      	bhi.n	8001bd2 <osSemaphoreNew+0x12e>
    mem = -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d015      	beq.n	8001b2a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <osSemaphoreNew+0x70>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b4f      	cmp	r3, #79	; 0x4f
 8001b0c:	d902      	bls.n	8001b14 <osSemaphoreNew+0x70>
        mem = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	623b      	str	r3, [r7, #32]
 8001b12:	e00c      	b.n	8001b2e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d108      	bne.n	8001b2e <osSemaphoreNew+0x8a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d104      	bne.n	8001b2e <osSemaphoreNew+0x8a>
          mem = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	e001      	b.n	8001b2e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d04d      	beq.n	8001bd2 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d129      	bne.n	8001b90 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10b      	bne.n	8001b5a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	2303      	movs	r3, #3
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2001      	movs	r0, #1
 8001b52:	f000 fa1b 	bl	8001f8c <xQueueGenericCreateStatic>
 8001b56:	6278      	str	r0, [r7, #36]	; 0x24
 8001b58:	e005      	b.n	8001b66 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f000 fa86 	bl	8002070 <xQueueGenericCreate>
 8001b64:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d022      	beq.n	8001bb2 <osSemaphoreNew+0x10e>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01f      	beq.n	8001bb2 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b7a:	f000 fb3f 	bl	80021fc <xQueueGenericSend>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d016      	beq.n	8001bb2 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8001b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b86:	f000 feea 	bl	800295e <vQueueDelete>
            hSemaphore = NULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	e010      	b.n	8001bb2 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fac6 	bl	8002130 <xQueueCreateCountingSemaphoreStatic>
 8001ba4:	6278      	str	r0, [r7, #36]	; 0x24
 8001ba6:	e004      	b.n	8001bb2 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 faf5 	bl	800219a <xQueueCreateCountingSemaphore>
 8001bb0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <osSemaphoreNew+0x122>
          name = attr->name;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	e001      	b.n	8001bca <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001bca:	69f9      	ldr	r1, [r7, #28]
 8001bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bce:	f001 f811 	bl	8002bf4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000002c 	.word	0x2000002c

08001be0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bf0:	f3ef 8305 	mrs	r3, IPSR
 8001bf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001bf6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d170      	bne.n	8001cde <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8001c00:	617b      	str	r3, [r7, #20]
  return(result);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d16a      	bne.n	8001cde <osMessageQueueNew+0xfe>
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <osMessageQueueNew+0x108>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d105      	bne.n	8001c1c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c10:	f3ef 8311 	mrs	r3, BASEPRI
 8001c14:	613b      	str	r3, [r7, #16]
  return(result);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d160      	bne.n	8001cde <osMessageQueueNew+0xfe>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d05d      	beq.n	8001cde <osMessageQueueNew+0xfe>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d05a      	beq.n	8001cde <osMessageQueueNew+0xfe>
    mem = -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d029      	beq.n	8001c88 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d012      	beq.n	8001c62 <osMessageQueueNew+0x82>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b4f      	cmp	r3, #79	; 0x4f
 8001c42:	d90e      	bls.n	8001c62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d302      	bcc.n	8001c62 <osMessageQueueNew+0x82>
        mem = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	e014      	b.n	8001c8c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d110      	bne.n	8001c8c <osMessageQueueNew+0xac>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10c      	bne.n	8001c8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d104      	bne.n	8001c8c <osMessageQueueNew+0xac>
          mem = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
 8001c86:	e001      	b.n	8001c8c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10c      	bne.n	8001cac <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6899      	ldr	r1, [r3, #8]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f972 	bl	8001f8c <xQueueGenericCreateStatic>
 8001ca8:	6278      	str	r0, [r7, #36]	; 0x24
 8001caa:	e008      	b.n	8001cbe <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f9da 	bl	8002070 <xQueueGenericCreate>
 8001cbc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00c      	beq.n	8001cde <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	e001      	b.n	8001cd6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001cd6:	69f9      	ldr	r1, [r7, #28]
 8001cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cda:	f000 ff8b 	bl	8002bf4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000002c 	.word	0x2000002c

08001cec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <vApplicationGetIdleTaskMemory+0x2c>)
 8001cfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <vApplicationGetIdleTaskMemory+0x30>)
 8001d02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000030 	.word	0x20000030
 8001d1c:	2000008c 	.word	0x2000008c

08001d20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <vApplicationGetTimerTaskMemory+0x2c>)
 8001d30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <vApplicationGetTimerTaskMemory+0x30>)
 8001d36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3e:	601a      	str	r2, [r3, #0]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	2000028c 	.word	0x2000028c
 8001d50:	200002e8 	.word	0x200002e8

08001d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f103 0208 	add.w	r2, r3, #8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f103 0208 	add.w	r2, r3, #8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f103 0208 	add.w	r2, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d103      	bne.n	8001e16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e00c      	b.n	8001e30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3308      	adds	r3, #8
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e002      	b.n	8001e24 <vListInsert+0x2e>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d2f6      	bcs.n	8001e1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6892      	ldr	r2, [r2, #8]
 8001e7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6852      	ldr	r2, [r2, #4]
 8001e88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d103      	bne.n	8001e9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	e7fe      	b.n	8001ee2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001ee4:	f002 fb2a 	bl	800453c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	68f9      	ldr	r1, [r7, #12]
 8001ef2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	441a      	add	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	3b01      	subs	r3, #1
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	441a      	add	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	22ff      	movs	r2, #255	; 0xff
 8001f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	22ff      	movs	r2, #255	; 0xff
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d114      	bne.n	8001f64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01a      	beq.n	8001f78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3310      	adds	r3, #16
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fb28 	bl	800359c <xTaskRemoveFromEventList>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d012      	beq.n	8001f78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <xQueueGenericReset+0xcc>)
 8001f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	f3bf 8f6f 	isb	sy
 8001f62:	e009      	b.n	8001f78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3310      	adds	r3, #16
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fef3 	bl	8001d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3324      	adds	r3, #36	; 0x24
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff feee 	bl	8001d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f78:	f002 fb0e 	bl	8004598 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000ed04 	.word	0xe000ed04

08001f8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	; 0x38
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <xQueueGenericCreateStatic+0x28>
 8001fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb2:	e7fe      	b.n	8001fb2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <xQueueGenericCreateStatic+0x42>
 8001fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
 8001fcc:	e7fe      	b.n	8001fcc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <xQueueGenericCreateStatic+0x4e>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <xQueueGenericCreateStatic+0x52>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <xQueueGenericCreateStatic+0x54>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <xQueueGenericCreateStatic+0x6c>
 8001fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	623b      	str	r3, [r7, #32]
 8001ff6:	e7fe      	b.n	8001ff6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <xQueueGenericCreateStatic+0x78>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <xQueueGenericCreateStatic+0x7c>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <xQueueGenericCreateStatic+0x7e>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <xQueueGenericCreateStatic+0x96>
 800200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	e7fe      	b.n	8002020 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002022:	2350      	movs	r3, #80	; 0x50
 8002024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b50      	cmp	r3, #80	; 0x50
 800202a:	d009      	beq.n	8002040 <xQueueGenericCreateStatic+0xb4>
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	e7fe      	b.n	800203e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00d      	beq.n	8002066 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002052:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f842 	bl	80020ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002068:	4618      	mov	r0, r3
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <xQueueGenericCreate+0x28>
 8002084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	e7fe      	b.n	8002096 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e004      	b.n	80020ae <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3350      	adds	r3, #80	; 0x50
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fb5c 	bl	8004770 <pvPortMalloc>
 80020b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00f      	beq.n	80020e0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	3350      	adds	r3, #80	; 0x50
 80020c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f805 	bl	80020ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80020e0:	69bb      	ldr	r3, [r7, #24]
	}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e002      	b.n	800210c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002118:	2101      	movs	r1, #1
 800211a:	69b8      	ldr	r0, [r7, #24]
 800211c:	f7ff fece 	bl	8001ebc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <xQueueCreateCountingSemaphoreStatic+0x26>
 8002142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e7fe      	b.n	8002154 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	429a      	cmp	r2, r3
 800215c:	d909      	bls.n	8002172 <xQueueCreateCountingSemaphoreStatic+0x42>
 800215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e7fe      	b.n	8002170 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002172:	2302      	movs	r3, #2
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff ff05 	bl	8001f8c <xQueueGenericCreateStatic>
 8002182:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002190:	69fb      	ldr	r3, [r7, #28]
	}
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <xQueueCreateCountingSemaphore+0x24>
 80021aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e7fe      	b.n	80021bc <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d909      	bls.n	80021da <xQueueCreateCountingSemaphore+0x40>
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e7fe      	b.n	80021d8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80021da:	2202      	movs	r2, #2
 80021dc:	2100      	movs	r1, #0
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ff46 	bl	8002070 <xQueueGenericCreate>
 80021e4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80021f2:	697b      	ldr	r3, [r7, #20]
	}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800220a:	2300      	movs	r3, #0
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <xQueueGenericSend+0x30>
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
 800222a:	e7fe      	b.n	800222a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <xQueueGenericSend+0x3e>
 8002232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <xQueueGenericSend+0x42>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <xQueueGenericSend+0x44>
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <xQueueGenericSend+0x5c>
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	e7fe      	b.n	8002256 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d103      	bne.n	8002266 <xQueueGenericSend+0x6a>
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <xQueueGenericSend+0x6e>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <xQueueGenericSend+0x70>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <xQueueGenericSend+0x88>
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	e7fe      	b.n	8002282 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002284:	f001 fb46 	bl	8003914 <xTaskGetSchedulerState>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <xQueueGenericSend+0x98>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <xQueueGenericSend+0x9c>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <xQueueGenericSend+0x9e>
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <xQueueGenericSend+0xb6>
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	e7fe      	b.n	80022b0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022b2:	f002 f943 	bl	800453c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <xQueueGenericSend+0xcc>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d129      	bne.n	800231c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ce:	f000 fb80 	bl	80029d2 <prvCopyDataToQueue>
 80022d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	3324      	adds	r3, #36	; 0x24
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f95b 	bl	800359c <xTaskRemoveFromEventList>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80022ec:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <xQueueGenericSend+0x1f0>)
 80022ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	e00a      	b.n	8002314 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002304:	4b39      	ldr	r3, [pc, #228]	; (80023ec <xQueueGenericSend+0x1f0>)
 8002306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002314:	f002 f940 	bl	8004598 <vPortExitCritical>
				return pdPASS;
 8002318:	2301      	movs	r3, #1
 800231a:	e063      	b.n	80023e4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d103      	bne.n	800232a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002322:	f002 f939 	bl	8004598 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002326:	2300      	movs	r3, #0
 8002328:	e05c      	b.n	80023e4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800232a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f993 	bl	8003660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800233a:	2301      	movs	r3, #1
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800233e:	f002 f92b 	bl	8004598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002342:	f000 ff09 	bl	8003158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002346:	f002 f8f9 	bl	800453c <vPortEnterCritical>
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002350:	b25b      	sxtb	r3, r3
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d103      	bne.n	8002360 <xQueueGenericSend+0x164>
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002366:	b25b      	sxtb	r3, r3
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d103      	bne.n	8002376 <xQueueGenericSend+0x17a>
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002376:	f002 f90f 	bl	8004598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800237a:	1d3a      	adds	r2, r7, #4
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f001 f982 	bl	800368c <xTaskCheckForTimeOut>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d124      	bne.n	80023d8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800238e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002390:	f000 fc17 	bl	8002bc2 <prvIsQueueFull>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d018      	beq.n	80023cc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	3310      	adds	r3, #16
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 f8ac 	bl	8003500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023aa:	f000 fba2 	bl	8002af2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023ae:	f000 fee1 	bl	8003174 <xTaskResumeAll>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f47f af7c 	bne.w	80022b2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <xQueueGenericSend+0x1f0>)
 80023bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	e772      	b.n	80022b2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023ce:	f000 fb90 	bl	8002af2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023d2:	f000 fecf 	bl	8003174 <xTaskResumeAll>
 80023d6:	e76c      	b.n	80022b2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023da:	f000 fb8a 	bl	8002af2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023de:	f000 fec9 	bl	8003174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80023e2:	2300      	movs	r3, #0
		}
	}
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3738      	adds	r7, #56	; 0x38
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	e000ed04 	.word	0xe000ed04

080023f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	; 0x38
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <xQueueGenericSendFromISR+0x2c>
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	e7fe      	b.n	800241a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <xQueueGenericSendFromISR+0x3a>
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <xQueueGenericSendFromISR+0x3e>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <xQueueGenericSendFromISR+0x40>
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <xQueueGenericSendFromISR+0x58>
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	e7fe      	b.n	8002446 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d103      	bne.n	8002456 <xQueueGenericSendFromISR+0x66>
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <xQueueGenericSendFromISR+0x6a>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <xQueueGenericSendFromISR+0x6c>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <xQueueGenericSendFromISR+0x84>
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e7fe      	b.n	8002472 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002474:	f002 f93e 	bl	80046f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002478:	f3ef 8211 	mrs	r2, BASEPRI
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	61ba      	str	r2, [r7, #24]
 800248e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002490:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	429a      	cmp	r2, r3
 800249e:	d302      	bcc.n	80024a6 <xQueueGenericSendFromISR+0xb6>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d12c      	bne.n	8002500 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b6:	f000 fa8c 	bl	80029d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d112      	bne.n	80024ea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d016      	beq.n	80024fa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	3324      	adds	r3, #36	; 0x24
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 f863 	bl	800359c <xTaskRemoveFromEventList>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00e      	beq.n	80024fa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e007      	b.n	80024fa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024ee:	3301      	adds	r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80024fa:	2301      	movs	r3, #1
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80024fe:	e001      	b.n	8002504 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002510:	4618      	mov	r0, r3
 8002512:	3738      	adds	r7, #56	; 0x38
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <xQueueReceive+0x2e>
	__asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	e7fe      	b.n	8002544 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <xQueueReceive+0x3c>
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <xQueueReceive+0x40>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <xQueueReceive+0x42>
 8002558:	2300      	movs	r3, #0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <xQueueReceive+0x5a>
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e7fe      	b.n	8002570 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002572:	f001 f9cf 	bl	8003914 <xTaskGetSchedulerState>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <xQueueReceive+0x6a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <xQueueReceive+0x6e>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <xQueueReceive+0x70>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <xQueueReceive+0x88>
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e7fe      	b.n	800259e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80025a0:	f001 ffcc 	bl	800453c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01f      	beq.n	80025f0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b4:	f000 fa77 	bl	8002aa6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	1e5a      	subs	r2, r3, #1
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00f      	beq.n	80025e8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	3310      	adds	r3, #16
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 ffe5 	bl	800359c <xTaskRemoveFromEventList>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80025d8:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <xQueueReceive+0x1b4>)
 80025da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80025e8:	f001 ffd6 	bl	8004598 <vPortExitCritical>
				return pdPASS;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e069      	b.n	80026c4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025f6:	f001 ffcf 	bl	8004598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e062      	b.n	80026c4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d106      	bne.n	8002612 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	4618      	mov	r0, r3
 800260a:	f001 f829 	bl	8003660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800260e:	2301      	movs	r3, #1
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002612:	f001 ffc1 	bl	8004598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002616:	f000 fd9f 	bl	8003158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800261a:	f001 ff8f 	bl	800453c <vPortEnterCritical>
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002624:	b25b      	sxtb	r3, r3
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d103      	bne.n	8002634 <xQueueReceive+0x11c>
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d103      	bne.n	800264a <xQueueReceive+0x132>
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800264a:	f001 ffa5 	bl	8004598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800264e:	1d3a      	adds	r2, r7, #4
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f001 f818 	bl	800368c <xTaskCheckForTimeOut>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d123      	bne.n	80026aa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002664:	f000 fa97 	bl	8002b96 <prvIsQueueEmpty>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d017      	beq.n	800269e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	3324      	adds	r3, #36	; 0x24
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f000 ff42 	bl	8003500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800267c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267e:	f000 fa38 	bl	8002af2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002682:	f000 fd77 	bl	8003174 <xTaskResumeAll>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d189      	bne.n	80025a0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <xQueueReceive+0x1b4>)
 800268e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	e780      	b.n	80025a0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800269e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026a0:	f000 fa27 	bl	8002af2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026a4:	f000 fd66 	bl	8003174 <xTaskResumeAll>
 80026a8:	e77a      	b.n	80025a0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ac:	f000 fa21 	bl	8002af2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026b0:	f000 fd60 	bl	8003174 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026b6:	f000 fa6e 	bl	8002b96 <prvIsQueueEmpty>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f43f af6f 	beq.w	80025a0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80026c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3730      	adds	r7, #48	; 0x30
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	e000ed04 	.word	0xe000ed04

080026d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08e      	sub	sp, #56	; 0x38
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <xQueueSemaphoreTake+0x30>
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	e7fe      	b.n	80026fe <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <xQueueSemaphoreTake+0x4c>
 8002708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e7fe      	b.n	800271a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800271c:	f001 f8fa 	bl	8003914 <xTaskGetSchedulerState>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <xQueueSemaphoreTake+0x5c>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <xQueueSemaphoreTake+0x60>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <xQueueSemaphoreTake+0x62>
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <xQueueSemaphoreTake+0x7a>
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	e7fe      	b.n	8002748 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800274a:	f001 fef7 	bl	800453c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d024      	beq.n	80027a4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800276a:	f001 fa4f 	bl	8003c0c <pvTaskIncrementMutexHeldCount>
 800276e:	4602      	mov	r2, r0
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00f      	beq.n	800279c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	3310      	adds	r3, #16
 8002780:	4618      	mov	r0, r3
 8002782:	f000 ff0b 	bl	800359c <xTaskRemoveFromEventList>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <xQueueSemaphoreTake+0x20c>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800279c:	f001 fefc 	bl	8004598 <vPortExitCritical>
				return pdPASS;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e096      	b.n	80028d2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d110      	bne.n	80027cc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <xQueueSemaphoreTake+0xf4>
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e7fe      	b.n	80027c2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80027c4:	f001 fee8 	bl	8004598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e082      	b.n	80028d2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 ff42 	bl	8003660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027e0:	f001 feda 	bl	8004598 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027e4:	f000 fcb8 	bl	8003158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027e8:	f001 fea8 	bl	800453c <vPortEnterCritical>
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d103      	bne.n	8002802 <xQueueSemaphoreTake+0x132>
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002808:	b25b      	sxtb	r3, r3
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d103      	bne.n	8002818 <xQueueSemaphoreTake+0x148>
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002818:	f001 febe 	bl	8004598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800281c:	463a      	mov	r2, r7
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f000 ff31 	bl	800368c <xTaskCheckForTimeOut>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d132      	bne.n	8002896 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002832:	f000 f9b0 	bl	8002b96 <prvIsQueueEmpty>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d026      	beq.n	800288a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002844:	f001 fe7a 	bl	800453c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4618      	mov	r0, r3
 800284e:	f001 f87f 	bl	8003950 <xTaskPriorityInherit>
 8002852:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002854:	f001 fea0 	bl	8004598 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	3324      	adds	r3, #36	; 0x24
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fe4d 	bl	8003500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002868:	f000 f943 	bl	8002af2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800286c:	f000 fc82 	bl	8003174 <xTaskResumeAll>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	f47f af69 	bne.w	800274a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <xQueueSemaphoreTake+0x20c>)
 800287a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	e75f      	b.n	800274a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800288a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800288c:	f000 f931 	bl	8002af2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002890:	f000 fc70 	bl	8003174 <xTaskResumeAll>
 8002894:	e759      	b.n	800274a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002898:	f000 f92b 	bl	8002af2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800289c:	f000 fc6a 	bl	8003174 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028a2:	f000 f978 	bl	8002b96 <prvIsQueueEmpty>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f43f af4e 	beq.w	800274a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00d      	beq.n	80028d0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80028b4:	f001 fe42 	bl	800453c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80028b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028ba:	f000 f872 	bl	80029a2 <prvGetDisinheritPriorityAfterTimeout>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 f91c 	bl	8003b04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80028cc:	f001 fe64 	bl	8004598 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3738      	adds	r7, #56	; 0x38
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000ed04 	.word	0xe000ed04

080028e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <uxQueueMessagesWaiting+0x22>
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	e7fe      	b.n	8002900 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8002902:	f001 fe1b 	bl	800453c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800290c:	f001 fe44 	bl	8004598 <vPortExitCritical>

	return uxReturn;
 8002910:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <uxQueueSpacesAvailable+0x26>
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e7fe      	b.n	800293e <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8002940:	f001 fdfc 	bl	800453c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8002950:	f001 fe22 	bl	8004598 <vPortExitCritical>

	return uxReturn;
 8002954:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <vQueueDelete+0x26>
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	e7fe      	b.n	8002982 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f95d 	bl	8002c44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f001 ffad 	bl	80048f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e001      	b.n	80029c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80029c4:	68fb      	ldr	r3, [r7, #12]
	}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10d      	bne.n	8002a0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d14d      	bne.n	8002a94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 f815 	bl	8003a2c <xTaskPriorityDisinherit>
 8002a02:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	e043      	b.n	8002a94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d119      	bne.n	8002a46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6898      	ldr	r0, [r3, #8]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	f002 f8a1 	bl	8004b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	441a      	add	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d32b      	bcc.n	8002a94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	e026      	b.n	8002a94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	68d8      	ldr	r0, [r3, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	f002 f887 	bl	8004b64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	425b      	negs	r3, r3
 8002a60:	441a      	add	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d207      	bcs.n	8002a82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	425b      	negs	r3, r3
 8002a7c:	441a      	add	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d105      	bne.n	8002a94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a9c:	697b      	ldr	r3, [r7, #20]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d018      	beq.n	8002aea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	441a      	add	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d303      	bcc.n	8002ada <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68d9      	ldr	r1, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6838      	ldr	r0, [r7, #0]
 8002ae6:	f002 f83d 	bl	8004b64 <memcpy>
	}
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002afa:	f001 fd1f 	bl	800453c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b06:	e011      	b.n	8002b2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d012      	beq.n	8002b36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3324      	adds	r3, #36	; 0x24
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fd41 	bl	800359c <xTaskRemoveFromEventList>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b20:	f000 fe14 	bl	800374c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	dce9      	bgt.n	8002b08 <prvUnlockQueue+0x16>
 8002b34:	e000      	b.n	8002b38 <prvUnlockQueue+0x46>
					break;
 8002b36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	22ff      	movs	r2, #255	; 0xff
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b40:	f001 fd2a 	bl	8004598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b44:	f001 fcfa 	bl	800453c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b50:	e011      	b.n	8002b76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3310      	adds	r3, #16
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fd1c 	bl	800359c <xTaskRemoveFromEventList>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b6a:	f000 fdef 	bl	800374c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b6e:	7bbb      	ldrb	r3, [r7, #14]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	dce9      	bgt.n	8002b52 <prvUnlockQueue+0x60>
 8002b7e:	e000      	b.n	8002b82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b8a:	f001 fd05 	bl	8004598 <vPortExitCritical>
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b9e:	f001 fccd 	bl	800453c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e001      	b.n	8002bb4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bb4:	f001 fcf0 	bl	8004598 <vPortExitCritical>

	return xReturn;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bca:	f001 fcb7 	bl	800453c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d102      	bne.n	8002be0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e001      	b.n	8002be4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002be4:	f001 fcd8 	bl	8004598 <vPortExitCritical>

	return xReturn;
 8002be8:	68fb      	ldr	r3, [r7, #12]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e014      	b.n	8002c2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <vQueueAddToRegistry+0x4c>)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c10:	490b      	ldr	r1, [pc, #44]	; (8002c40 <vQueueAddToRegistry+0x4c>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <vQueueAddToRegistry+0x4c>)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c26:	e005      	b.n	8002c34 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b07      	cmp	r3, #7
 8002c32:	d9e7      	bls.n	8002c04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	2000495c 	.word	0x2000495c

08002c44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e016      	b.n	8002c80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <vQueueUnregisterQueue+0x50>)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d10b      	bne.n	8002c7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002c62:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <vQueueUnregisterQueue+0x50>)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2100      	movs	r1, #0
 8002c68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002c6c:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <vQueueUnregisterQueue+0x50>)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
				break;
 8002c78:	e005      	b.n	8002c86 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b07      	cmp	r3, #7
 8002c84:	d9e5      	bls.n	8002c52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	2000495c 	.word	0x2000495c

08002c98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ca8:	f001 fc48 	bl	800453c <vPortEnterCritical>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb2:	b25b      	sxtb	r3, r3
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d103      	bne.n	8002cc2 <vQueueWaitForMessageRestricted+0x2a>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d103      	bne.n	8002cd8 <vQueueWaitForMessageRestricted+0x40>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd8:	f001 fc5e 	bl	8004598 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3324      	adds	r3, #36	; 0x24
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fc2b 	bl	8003548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff fefd 	bl	8002af2 <prvUnlockQueue>
	}
 8002cf8:	bf00      	nop
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08e      	sub	sp, #56	; 0x38
 8002d04:	af04      	add	r7, sp, #16
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <xTaskCreateStatic+0x28>
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	e7fe      	b.n	8002d26 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <xTaskCreateStatic+0x42>
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	e7fe      	b.n	8002d40 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d42:	235c      	movs	r3, #92	; 0x5c
 8002d44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b5c      	cmp	r3, #92	; 0x5c
 8002d4a:	d009      	beq.n	8002d60 <xTaskCreateStatic+0x60>
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e7fe      	b.n	8002d5e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01e      	beq.n	8002da4 <xTaskCreateStatic+0xa4>
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9303      	str	r3, [sp, #12]
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f850 	bl	8002e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d9e:	f000 f8d3 	bl	8002f48 <prvAddNewTaskToReadyList>
 8002da2:	e001      	b.n	8002da8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002da8:	697b      	ldr	r3, [r7, #20]
	}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3728      	adds	r7, #40	; 0x28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08c      	sub	sp, #48	; 0x30
 8002db6:	af04      	add	r7, sp, #16
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fcd2 	bl	8004770 <pvPortMalloc>
 8002dcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00e      	beq.n	8002df2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002dd4:	205c      	movs	r0, #92	; 0x5c
 8002dd6:	f001 fccb 	bl	8004770 <pvPortMalloc>
 8002dda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
 8002de8:	e005      	b.n	8002df6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f001 fd82 	bl	80048f4 <vPortFree>
 8002df0:	e001      	b.n	8002df6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d017      	beq.n	8002e2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e04:	88fa      	ldrh	r2, [r7, #6]
 8002e06:	2300      	movs	r3, #0
 8002e08:	9303      	str	r3, [sp, #12]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	9302      	str	r3, [sp, #8]
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f80e 	bl	8002e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e20:	69f8      	ldr	r0, [r7, #28]
 8002e22:	f000 f891 	bl	8002f48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e26:	2301      	movs	r3, #1
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e002      	b.n	8002e32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e32:	69bb      	ldr	r3, [r7, #24]
	}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	461a      	mov	r2, r3
 8002e54:	21a5      	movs	r1, #165	; 0xa5
 8002e56:	f001 fe90 	bl	8004b7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e64:	3b01      	subs	r3, #1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f023 0307 	bic.w	r3, r3, #7
 8002e72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <prvInitialiseNewTask+0x56>
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e7fe      	b.n	8002e90 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e012      	b.n	8002ebe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	7819      	ldrb	r1, [r3, #0]
 8002ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3334      	adds	r3, #52	; 0x34
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	2b0f      	cmp	r3, #15
 8002ec2:	d9e9      	bls.n	8002e98 <prvInitialiseNewTask+0x5c>
 8002ec4:	e000      	b.n	8002ec8 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002ec6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	2b37      	cmp	r3, #55	; 0x37
 8002ed4:	d901      	bls.n	8002eda <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ed6:	2337      	movs	r3, #55	; 0x37
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	2200      	movs	r2, #0
 8002eea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	3304      	adds	r3, #4
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe ff4f 	bl	8001d94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	3318      	adds	r3, #24
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe ff4a 	bl	8001d94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	2200      	movs	r2, #0
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	68f9      	ldr	r1, [r7, #12]
 8002f28:	69b8      	ldr	r0, [r7, #24]
 8002f2a:	f001 f9e1 	bl	80042f0 <pxPortInitialiseStack>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f40:	bf00      	nop
 8002f42:	3720      	adds	r7, #32
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f50:	f001 faf4 	bl	800453c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <prvAddNewTaskToReadyList+0xc4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	4a2c      	ldr	r2, [pc, #176]	; (800300c <prvAddNewTaskToReadyList+0xc4>)
 8002f5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <prvAddNewTaskToReadyList+0xc4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d110      	bne.n	8002f96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f74:	f000 fc0e 	bl	8003794 <prvInitialiseTaskLists>
 8002f78:	e00d      	b.n	8002f96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <prvAddNewTaskToReadyList+0xcc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d802      	bhi.n	8002f96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <prvAddNewTaskToReadyList+0xd0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <prvAddNewTaskToReadyList+0xd0>)
 8002f9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <prvAddNewTaskToReadyList+0xd0>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <prvAddNewTaskToReadyList+0xd4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d903      	bls.n	8002fbc <prvAddNewTaskToReadyList+0x74>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a18      	ldr	r2, [pc, #96]	; (800301c <prvAddNewTaskToReadyList+0xd4>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a15      	ldr	r2, [pc, #84]	; (8003020 <prvAddNewTaskToReadyList+0xd8>)
 8002fca:	441a      	add	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7fe feeb 	bl	8001dae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fd8:	f001 fade 	bl	8004598 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <prvAddNewTaskToReadyList+0xcc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00e      	beq.n	8003002 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d207      	bcs.n	8003002 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <prvAddNewTaskToReadyList+0xdc>)
 8002ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000bbc 	.word	0x20000bbc
 8003010:	200006e8 	.word	0x200006e8
 8003014:	20000bc8 	.word	0x20000bc8
 8003018:	20000bd8 	.word	0x20000bd8
 800301c:	20000bc4 	.word	0x20000bc4
 8003020:	200006ec 	.word	0x200006ec
 8003024:	e000ed04 	.word	0xe000ed04

08003028 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d016      	beq.n	8003068 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <vTaskDelay+0x60>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <vTaskDelay+0x2e>
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	e7fe      	b.n	8003054 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003056:	f000 f87f 	bl	8003158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800305a:	2100      	movs	r1, #0
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fde9 	bl	8003c34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003062:	f000 f887 	bl	8003174 <xTaskResumeAll>
 8003066:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <vTaskDelay+0x64>)
 8003070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000be4 	.word	0x20000be4
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800309e:	463a      	mov	r2, r7
 80030a0:	1d39      	adds	r1, r7, #4
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fe20 	bl	8001cec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	2300      	movs	r3, #0
 80030bc:	460a      	mov	r2, r1
 80030be:	4920      	ldr	r1, [pc, #128]	; (8003140 <vTaskStartScheduler+0xb0>)
 80030c0:	4820      	ldr	r0, [pc, #128]	; (8003144 <vTaskStartScheduler+0xb4>)
 80030c2:	f7ff fe1d 	bl	8002d00 <xTaskCreateStatic>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <vTaskStartScheduler+0xb8>)
 80030ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <vTaskStartScheduler+0xb8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030d4:	2301      	movs	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e001      	b.n	80030de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80030e4:	f000 fdfa 	bl	8003cdc <xTimerCreateTimerTask>
 80030e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d115      	bne.n	800311c <vTaskStartScheduler+0x8c>
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <vTaskStartScheduler+0xbc>)
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <vTaskStartScheduler+0xc0>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <vTaskStartScheduler+0xc4>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003116:	f001 f973 	bl	8004400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800311a:	e00d      	b.n	8003138 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d109      	bne.n	8003138 <vTaskStartScheduler+0xa8>
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e7fe      	b.n	8003136 <vTaskStartScheduler+0xa6>
}
 8003138:	bf00      	nop
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	08004bf0 	.word	0x08004bf0
 8003144:	08003765 	.word	0x08003765
 8003148:	20000be0 	.word	0x20000be0
 800314c:	20000bdc 	.word	0x20000bdc
 8003150:	20000bc8 	.word	0x20000bc8
 8003154:	20000bc0 	.word	0x20000bc0

08003158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <vTaskSuspendAll+0x18>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	4a03      	ldr	r2, [pc, #12]	; (8003170 <vTaskSuspendAll+0x18>)
 8003164:	6013      	str	r3, [r2, #0]
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	20000be4 	.word	0x20000be4

08003174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003182:	4b41      	ldr	r3, [pc, #260]	; (8003288 <xTaskResumeAll+0x114>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <xTaskResumeAll+0x2a>
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	e7fe      	b.n	800319c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800319e:	f001 f9cd 	bl	800453c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031a2:	4b39      	ldr	r3, [pc, #228]	; (8003288 <xTaskResumeAll+0x114>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	4a37      	ldr	r2, [pc, #220]	; (8003288 <xTaskResumeAll+0x114>)
 80031aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <xTaskResumeAll+0x114>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d162      	bne.n	800327a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <xTaskResumeAll+0x118>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05e      	beq.n	800327a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031bc:	e02f      	b.n	800321e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031be:	4b34      	ldr	r3, [pc, #208]	; (8003290 <xTaskResumeAll+0x11c>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3318      	adds	r3, #24
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fe4c 	bl	8001e68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fe47 	bl	8001e68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <xTaskResumeAll+0x120>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d903      	bls.n	80031ee <xTaskResumeAll+0x7a>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <xTaskResumeAll+0x120>)
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4a27      	ldr	r2, [pc, #156]	; (8003298 <xTaskResumeAll+0x124>)
 80031fc:	441a      	add	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3304      	adds	r3, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f7fe fdd2 	bl	8001dae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <xTaskResumeAll+0x128>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <xTaskResumeAll+0x12c>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <xTaskResumeAll+0x11c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1cb      	bne.n	80031be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800322c:	f000 fb4c 	bl	80038c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003230:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <xTaskResumeAll+0x130>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800323c:	f000 f846 	bl	80032cc <xTaskIncrementTick>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <xTaskResumeAll+0x12c>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f1      	bne.n	800323c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <xTaskResumeAll+0x130>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <xTaskResumeAll+0x12c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003266:	2301      	movs	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <xTaskResumeAll+0x134>)
 800326c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800327a:	f001 f98d 	bl	8004598 <vPortExitCritical>

	return xAlreadyYielded;
 800327e:	68bb      	ldr	r3, [r7, #8]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000be4 	.word	0x20000be4
 800328c:	20000bbc 	.word	0x20000bbc
 8003290:	20000b7c 	.word	0x20000b7c
 8003294:	20000bc4 	.word	0x20000bc4
 8003298:	200006ec 	.word	0x200006ec
 800329c:	200006e8 	.word	0x200006e8
 80032a0:	20000bd0 	.word	0x20000bd0
 80032a4:	20000bcc 	.word	0x20000bcc
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <xTaskGetTickCount+0x1c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032b8:	687b      	ldr	r3, [r7, #4]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000bc0 	.word	0x20000bc0

080032cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d6:	4b51      	ldr	r3, [pc, #324]	; (800341c <xTaskIncrementTick+0x150>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 808d 	bne.w	80033fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032e0:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <xTaskIncrementTick+0x154>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032e8:	4a4d      	ldr	r2, [pc, #308]	; (8003420 <xTaskIncrementTick+0x154>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11f      	bne.n	8003334 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80032f4:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <xTaskIncrementTick+0x158>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <xTaskIncrementTick+0x46>
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	e7fe      	b.n	8003310 <xTaskIncrementTick+0x44>
 8003312:	4b44      	ldr	r3, [pc, #272]	; (8003424 <xTaskIncrementTick+0x158>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <xTaskIncrementTick+0x15c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a41      	ldr	r2, [pc, #260]	; (8003424 <xTaskIncrementTick+0x158>)
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	4a41      	ldr	r2, [pc, #260]	; (8003428 <xTaskIncrementTick+0x15c>)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <xTaskIncrementTick+0x160>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	4a3f      	ldr	r2, [pc, #252]	; (800342c <xTaskIncrementTick+0x160>)
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	f000 faca 	bl	80038c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003334:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <xTaskIncrementTick+0x164>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	d34e      	bcc.n	80033dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800333e:	4b39      	ldr	r3, [pc, #228]	; (8003424 <xTaskIncrementTick+0x158>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <xTaskIncrementTick+0x80>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <xTaskIncrementTick+0x82>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <xTaskIncrementTick+0x164>)
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	601a      	str	r2, [r3, #0]
					break;
 800335a:	e03f      	b.n	80033dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <xTaskIncrementTick+0x158>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d203      	bcs.n	800337c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003374:	4a2e      	ldr	r2, [pc, #184]	; (8003430 <xTaskIncrementTick+0x164>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
						break;
 800337a:	e02f      	b.n	80033dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	3304      	adds	r3, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fd71 	bl	8001e68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3318      	adds	r3, #24
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fd68 	bl	8001e68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <xTaskIncrementTick+0x168>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d903      	bls.n	80033ac <xTaskIncrementTick+0xe0>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	4a22      	ldr	r2, [pc, #136]	; (8003434 <xTaskIncrementTick+0x168>)
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <xTaskIncrementTick+0x16c>)
 80033ba:	441a      	add	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	3304      	adds	r3, #4
 80033c0:	4619      	mov	r1, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	f7fe fcf3 	bl	8001dae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <xTaskIncrementTick+0x170>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d3b3      	bcc.n	800333e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80033d6:	2301      	movs	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033da:	e7b0      	b.n	800333e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <xTaskIncrementTick+0x170>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	4915      	ldr	r1, [pc, #84]	; (8003438 <xTaskIncrementTick+0x16c>)
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d907      	bls.n	8003404 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80033f4:	2301      	movs	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e004      	b.n	8003404 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <xTaskIncrementTick+0x174>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <xTaskIncrementTick+0x174>)
 8003402:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <xTaskIncrementTick+0x178>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003410:	697b      	ldr	r3, [r7, #20]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000be4 	.word	0x20000be4
 8003420:	20000bc0 	.word	0x20000bc0
 8003424:	20000b74 	.word	0x20000b74
 8003428:	20000b78 	.word	0x20000b78
 800342c:	20000bd4 	.word	0x20000bd4
 8003430:	20000bdc 	.word	0x20000bdc
 8003434:	20000bc4 	.word	0x20000bc4
 8003438:	200006ec 	.word	0x200006ec
 800343c:	200006e8 	.word	0x200006e8
 8003440:	20000bcc 	.word	0x20000bcc
 8003444:	20000bd0 	.word	0x20000bd0

08003448 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <vTaskSwitchContext+0xa4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <vTaskSwitchContext+0xa8>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800345c:	e040      	b.n	80034e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <vTaskSwitchContext+0xa8>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <vTaskSwitchContext+0xac>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e00f      	b.n	800348c <vTaskSwitchContext+0x44>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <vTaskSwitchContext+0x3e>
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	e7fe      	b.n	8003484 <vTaskSwitchContext+0x3c>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3b01      	subs	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	491a      	ldr	r1, [pc, #104]	; (80034f8 <vTaskSwitchContext+0xb0>)
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0e5      	beq.n	800346c <vTaskSwitchContext+0x24>
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <vTaskSwitchContext+0xb0>)
 80034ac:	4413      	add	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3308      	adds	r3, #8
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d104      	bne.n	80034d0 <vTaskSwitchContext+0x88>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <vTaskSwitchContext+0xb4>)
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4a06      	ldr	r2, [pc, #24]	; (80034f4 <vTaskSwitchContext+0xac>)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	20000be4 	.word	0x20000be4
 80034f0:	20000bd0 	.word	0x20000bd0
 80034f4:	20000bc4 	.word	0x20000bc4
 80034f8:	200006ec 	.word	0x200006ec
 80034fc:	200006e8 	.word	0x200006e8

08003500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <vTaskPlaceOnEventList+0x24>
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e7fe      	b.n	8003522 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <vTaskPlaceOnEventList+0x44>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3318      	adds	r3, #24
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fe fc62 	bl	8001df6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003532:	2101      	movs	r1, #1
 8003534:	6838      	ldr	r0, [r7, #0]
 8003536:	f000 fb7d 	bl	8003c34 <prvAddCurrentTaskToDelayedList>
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200006e8 	.word	0x200006e8

08003548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <vTaskPlaceOnEventListRestricted+0x26>
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e7fe      	b.n	800356c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <vTaskPlaceOnEventListRestricted+0x50>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3318      	adds	r3, #24
 8003574:	4619      	mov	r1, r3
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7fe fc19 	bl	8001dae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	68b8      	ldr	r0, [r7, #8]
 800358c:	f000 fb52 	bl	8003c34 <prvAddCurrentTaskToDelayedList>
	}
 8003590:	bf00      	nop
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	200006e8 	.word	0x200006e8

0800359c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <xTaskRemoveFromEventList+0x2a>
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e7fe      	b.n	80035c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	3318      	adds	r3, #24
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fc4c 	bl	8001e68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <xTaskRemoveFromEventList+0xac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11d      	bne.n	8003614 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	3304      	adds	r3, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fc43 	bl	8001e68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <xTaskRemoveFromEventList+0xb0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d903      	bls.n	80035f6 <xTaskRemoveFromEventList+0x5a>
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	4a16      	ldr	r2, [pc, #88]	; (800364c <xTaskRemoveFromEventList+0xb0>)
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <xTaskRemoveFromEventList+0xb4>)
 8003604:	441a      	add	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7fe fbce 	bl	8001dae <vListInsertEnd>
 8003612:	e005      	b.n	8003620 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	3318      	adds	r3, #24
 8003618:	4619      	mov	r1, r3
 800361a:	480e      	ldr	r0, [pc, #56]	; (8003654 <xTaskRemoveFromEventList+0xb8>)
 800361c:	f7fe fbc7 	bl	8001dae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <xTaskRemoveFromEventList+0xbc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	429a      	cmp	r2, r3
 800362c:	d905      	bls.n	800363a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <xTaskRemoveFromEventList+0xc0>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e001      	b.n	800363e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800363e:	697b      	ldr	r3, [r7, #20]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000be4 	.word	0x20000be4
 800364c:	20000bc4 	.word	0x20000bc4
 8003650:	200006ec 	.word	0x200006ec
 8003654:	20000b7c 	.word	0x20000b7c
 8003658:	200006e8 	.word	0x200006e8
 800365c:	20000bd0 	.word	0x20000bd0

08003660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <vTaskInternalSetTimeOutState+0x24>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <vTaskInternalSetTimeOutState+0x28>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	605a      	str	r2, [r3, #4]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	20000bd4 	.word	0x20000bd4
 8003688:	20000bc0 	.word	0x20000bc0

0800368c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <xTaskCheckForTimeOut+0x24>
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	e7fe      	b.n	80036ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <xTaskCheckForTimeOut+0x3e>
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e7fe      	b.n	80036c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80036ca:	f000 ff37 	bl	800453c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <xTaskCheckForTimeOut+0xb8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e6:	d102      	bne.n	80036ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e023      	b.n	8003736 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <xTaskCheckForTimeOut+0xbc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d007      	beq.n	800370a <xTaskCheckForTimeOut+0x7e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	429a      	cmp	r2, r3
 8003702:	d302      	bcc.n	800370a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e015      	b.n	8003736 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	d20b      	bcs.n	800372c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	1ad2      	subs	r2, r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff9d 	bl	8003660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e004      	b.n	8003736 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003736:	f000 ff2f 	bl	8004598 <vPortExitCritical>

	return xReturn;
 800373a:	69fb      	ldr	r3, [r7, #28]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000bc0 	.word	0x20000bc0
 8003748:	20000bd4 	.word	0x20000bd4

0800374c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <vTaskMissedYield+0x14>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	20000bd0 	.word	0x20000bd0

08003764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800376c:	f000 f852 	bl	8003814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <prvIdleTask+0x28>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d9f9      	bls.n	800376c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <prvIdleTask+0x2c>)
 800377a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003788:	e7f0      	b.n	800376c <prvIdleTask+0x8>
 800378a:	bf00      	nop
 800378c:	200006ec 	.word	0x200006ec
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	e00c      	b.n	80037ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <prvInitialiseTaskLists+0x60>)
 80037ac:	4413      	add	r3, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fad0 	bl	8001d54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3301      	adds	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b37      	cmp	r3, #55	; 0x37
 80037be:	d9ef      	bls.n	80037a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <prvInitialiseTaskLists+0x64>)
 80037c2:	f7fe fac7 	bl	8001d54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037c6:	480d      	ldr	r0, [pc, #52]	; (80037fc <prvInitialiseTaskLists+0x68>)
 80037c8:	f7fe fac4 	bl	8001d54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037cc:	480c      	ldr	r0, [pc, #48]	; (8003800 <prvInitialiseTaskLists+0x6c>)
 80037ce:	f7fe fac1 	bl	8001d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037d2:	480c      	ldr	r0, [pc, #48]	; (8003804 <prvInitialiseTaskLists+0x70>)
 80037d4:	f7fe fabe 	bl	8001d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037d8:	480b      	ldr	r0, [pc, #44]	; (8003808 <prvInitialiseTaskLists+0x74>)
 80037da:	f7fe fabb 	bl	8001d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <prvInitialiseTaskLists+0x78>)
 80037e0:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <prvInitialiseTaskLists+0x64>)
 80037e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <prvInitialiseTaskLists+0x7c>)
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <prvInitialiseTaskLists+0x68>)
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200006ec 	.word	0x200006ec
 80037f8:	20000b4c 	.word	0x20000b4c
 80037fc:	20000b60 	.word	0x20000b60
 8003800:	20000b7c 	.word	0x20000b7c
 8003804:	20000b90 	.word	0x20000b90
 8003808:	20000ba8 	.word	0x20000ba8
 800380c:	20000b74 	.word	0x20000b74
 8003810:	20000b78 	.word	0x20000b78

08003814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800381a:	e019      	b.n	8003850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800381c:	f000 fe8e 	bl	800453c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <prvCheckTasksWaitingTermination+0x4c>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fb1b 	bl	8001e68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <prvCheckTasksWaitingTermination+0x50>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3b01      	subs	r3, #1
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <prvCheckTasksWaitingTermination+0x50>)
 800383a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <prvCheckTasksWaitingTermination+0x54>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3b01      	subs	r3, #1
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <prvCheckTasksWaitingTermination+0x54>)
 8003844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003846:	f000 fea7 	bl	8004598 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f80e 	bl	800386c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <prvCheckTasksWaitingTermination+0x54>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e1      	bne.n	800381c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000b90 	.word	0x20000b90
 8003864:	20000bbc 	.word	0x20000bbc
 8003868:	20000ba4 	.word	0x20000ba4

0800386c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800387a:	2b00      	cmp	r3, #0
 800387c:	d108      	bne.n	8003890 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4618      	mov	r0, r3
 8003884:	f001 f836 	bl	80048f4 <vPortFree>
				vPortFree( pxTCB );
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f001 f833 	bl	80048f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800388e:	e017      	b.n	80038c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003896:	2b01      	cmp	r3, #1
 8003898:	d103      	bne.n	80038a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f001 f82a 	bl	80048f4 <vPortFree>
	}
 80038a0:	e00e      	b.n	80038c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d009      	beq.n	80038c0 <prvDeleteTCB+0x54>
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e7fe      	b.n	80038be <prvDeleteTCB+0x52>
	}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <prvResetNextTaskUnblockTime+0x44>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <prvResetNextTaskUnblockTime+0x14>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <prvResetNextTaskUnblockTime+0x16>
 80038dc:	2300      	movs	r3, #0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <prvResetNextTaskUnblockTime+0x48>)
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295
 80038e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038ea:	e008      	b.n	80038fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <prvResetNextTaskUnblockTime+0x44>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4a05      	ldr	r2, [pc, #20]	; (8003910 <prvResetNextTaskUnblockTime+0x48>)
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000b74 	.word	0x20000b74
 8003910:	20000bdc 	.word	0x20000bdc

08003914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <xTaskGetSchedulerState+0x34>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003922:	2301      	movs	r3, #1
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	e008      	b.n	800393a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <xTaskGetSchedulerState+0x38>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003930:	2302      	movs	r3, #2
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	e001      	b.n	800393a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800393a:	687b      	ldr	r3, [r7, #4]
	}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	20000bc8 	.word	0x20000bc8
 800394c:	20000be4 	.word	0x20000be4

08003950 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d056      	beq.n	8003a14 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <xTaskPriorityInherit+0xd0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	429a      	cmp	r2, r3
 8003972:	d246      	bcs.n	8003a02 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db06      	blt.n	800398a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397c:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <xTaskPriorityInherit+0xd0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6959      	ldr	r1, [r3, #20]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <xTaskPriorityInherit+0xd4>)
 800399c:	4413      	add	r3, r2
 800399e:	4299      	cmp	r1, r3
 80039a0:	d101      	bne.n	80039a6 <xTaskPriorityInherit+0x56>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <xTaskPriorityInherit+0x58>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d022      	beq.n	80039f2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fa59 	bl	8001e68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <xTaskPriorityInherit+0xd0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c4:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <xTaskPriorityInherit+0xd8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d903      	bls.n	80039d4 <xTaskPriorityInherit+0x84>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4a15      	ldr	r2, [pc, #84]	; (8003a28 <xTaskPriorityInherit+0xd8>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <xTaskPriorityInherit+0xd4>)
 80039e2:	441a      	add	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7fe f9df 	bl	8001dae <vListInsertEnd>
 80039f0:	e004      	b.n	80039fc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <xTaskPriorityInherit+0xd0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e008      	b.n	8003a14 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <xTaskPriorityInherit+0xd0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d201      	bcs.n	8003a14 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a14:	68fb      	ldr	r3, [r7, #12]
	}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200006e8 	.word	0x200006e8
 8003a24:	200006ec 	.word	0x200006ec
 8003a28:	20000bc4 	.word	0x20000bc4

08003a2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d054      	beq.n	8003aec <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a42:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <xTaskPriorityDisinherit+0xcc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d009      	beq.n	8003a60 <xTaskPriorityDisinherit+0x34>
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e7fe      	b.n	8003a5e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <xTaskPriorityDisinherit+0x50>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	e7fe      	b.n	8003a7a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d02c      	beq.n	8003aec <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d128      	bne.n	8003aec <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe f9e2 	bl	8001e68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <xTaskPriorityDisinherit+0xd0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d903      	bls.n	8003acc <xTaskPriorityDisinherit+0xa0>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <xTaskPriorityDisinherit+0xd0>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <xTaskPriorityDisinherit+0xd4>)
 8003ada:	441a      	add	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fe f963 	bl	8001dae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003aec:	697b      	ldr	r3, [r7, #20]
	}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	200006e8 	.word	0x200006e8
 8003afc:	20000bc4 	.word	0x20000bc4
 8003b00:	200006ec 	.word	0x200006ec

08003b04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d06d      	beq.n	8003bf8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	e7fe      	b.n	8003b36 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d902      	bls.n	8003b48 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e002      	b.n	8003b4e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d04f      	beq.n	8003bf8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d14a      	bne.n	8003bf8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d109      	bne.n	8003b80 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	e7fe      	b.n	8003b7e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db04      	blt.n	8003b9e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	6959      	ldr	r1, [r3, #20]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003bae:	4413      	add	r3, r2
 8003bb0:	4299      	cmp	r1, r3
 8003bb2:	d101      	bne.n	8003bb8 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01c      	beq.n	8003bf8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe f950 	bl	8001e68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d903      	bls.n	8003bdc <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4a06      	ldr	r2, [pc, #24]	; (8003c04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003bea:	441a      	add	r2, r3
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fe f8db 	bl	8001dae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bf8:	bf00      	nop
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	200006e8 	.word	0x200006e8
 8003c04:	200006ec 	.word	0x200006ec
 8003c08:	20000bc4 	.word	0x20000bc4

08003c0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003c10:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c1e:	3201      	adds	r2, #1
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003c22:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c24:	681b      	ldr	r3, [r3, #0]
	}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	200006e8 	.word	0x200006e8

08003c34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c3e:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe f90c 	bl	8001e68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d10a      	bne.n	8003c6e <prvAddCurrentTaskToDelayedList+0x3a>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4819      	ldr	r0, [pc, #100]	; (8003ccc <prvAddCurrentTaskToDelayedList+0x98>)
 8003c68:	f7fe f8a1 	bl	8001dae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c6c:	e026      	b.n	8003cbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4413      	add	r3, r2
 8003c74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d209      	bcs.n	8003c9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f7fe f8af 	bl	8001df6 <vListInsert>
}
 8003c98:	e010      	b.n	8003cbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7fe f8a5 	bl	8001df6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d202      	bcs.n	8003cbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003cb6:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6013      	str	r3, [r2, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000bc0 	.word	0x20000bc0
 8003cc8:	200006e8 	.word	0x200006e8
 8003ccc:	20000ba8 	.word	0x20000ba8
 8003cd0:	20000b78 	.word	0x20000b78
 8003cd4:	20000b74 	.word	0x20000b74
 8003cd8:	20000bdc 	.word	0x20000bdc

08003cdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ce6:	f000 fac3 	bl	8004270 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <xTimerCreateTimerTask+0x80>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d021      	beq.n	8003d36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003cfa:	1d3a      	adds	r2, r7, #4
 8003cfc:	f107 0108 	add.w	r1, r7, #8
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe f80b 	bl	8001d20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	9202      	str	r2, [sp, #8]
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	2302      	movs	r3, #2
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	4910      	ldr	r1, [pc, #64]	; (8003d60 <xTimerCreateTimerTask+0x84>)
 8003d1e:	4811      	ldr	r0, [pc, #68]	; (8003d64 <xTimerCreateTimerTask+0x88>)
 8003d20:	f7fe ffee 	bl	8002d00 <xTaskCreateStatic>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <xTimerCreateTimerTask+0x8c>)
 8003d28:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <xTimerCreateTimerTask+0x8c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d32:	2301      	movs	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <xTimerCreateTimerTask+0x74>
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e7fe      	b.n	8003d4e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003d50:	697b      	ldr	r3, [r7, #20]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000c18 	.word	0x20000c18
 8003d60:	08004bf8 	.word	0x08004bf8
 8003d64:	08003e85 	.word	0x08003e85
 8003d68:	20000c1c 	.word	0x20000c1c

08003d6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <xTimerGenericCommand+0x2c>
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	e7fe      	b.n	8003d96 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <xTimerGenericCommand+0x94>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02a      	beq.n	8003df6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	dc18      	bgt.n	8003de4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003db2:	f7ff fdaf 	bl	8003914 <xTaskGetSchedulerState>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d109      	bne.n	8003dd0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <xTimerGenericCommand+0x94>)
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	f107 0110 	add.w	r1, r7, #16
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc8:	f7fe fa18 	bl	80021fc <xQueueGenericSend>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24
 8003dce:	e012      	b.n	8003df6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <xTimerGenericCommand+0x94>)
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	f107 0110 	add.w	r1, r7, #16
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f7fe fa0e 	bl	80021fc <xQueueGenericSend>
 8003de0:	6278      	str	r0, [r7, #36]	; 0x24
 8003de2:	e008      	b.n	8003df6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <xTimerGenericCommand+0x94>)
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	f107 0110 	add.w	r1, r7, #16
 8003dec:	2300      	movs	r3, #0
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	f7fe fafe 	bl	80023f0 <xQueueGenericSendFromISR>
 8003df4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000c18 	.word	0x20000c18

08003e04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <prvProcessExpiredTimer+0x7c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe f823 	bl	8001e68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d121      	bne.n	8003e6e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	18d1      	adds	r1, r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f000 f8c8 	bl	8003fcc <prvInsertTimerInActiveList>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d015      	beq.n	8003e6e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e42:	2300      	movs	r3, #0
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2300      	movs	r3, #0
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6978      	ldr	r0, [r7, #20]
 8003e4e:	f7ff ff8d 	bl	8003d6c <xTimerGenericCommand>
 8003e52:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <prvProcessExpiredTimer+0x6a>
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e7fe      	b.n	8003e6c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	6978      	ldr	r0, [r7, #20]
 8003e74:	4798      	blx	r3
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000c10 	.word	0x20000c10

08003e84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e8c:	f107 0308 	add.w	r3, r7, #8
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f857 	bl	8003f44 <prvGetNextExpireTime>
 8003e96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f803 	bl	8003ea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ea2:	f000 f8d5 	bl	8004050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ea6:	e7f1      	b.n	8003e8c <prvTimerTask+0x8>

08003ea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003eb2:	f7ff f951 	bl	8003158 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f866 	bl	8003f8c <prvSampleTimeNow>
 8003ec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d130      	bne.n	8003f2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <prvProcessTimerOrBlockTask+0x3c>
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d806      	bhi.n	8003ee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ed6:	f7ff f94d 	bl	8003174 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ff91 	bl	8003e04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ee2:	e024      	b.n	8003f2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <prvProcessTimerOrBlockTask+0x90>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <prvProcessTimerOrBlockTask+0x94>)
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7fe fec5 	bl	8002c98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f0e:	f7ff f931 	bl	8003174 <xTaskResumeAll>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <prvProcessTimerOrBlockTask+0x98>)
 8003f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	f3bf 8f6f 	isb	sy
}
 8003f28:	e001      	b.n	8003f2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f2a:	f7ff f923 	bl	8003174 <xTaskResumeAll>
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000c14 	.word	0x20000c14
 8003f3c:	20000c18 	.word	0x20000c18
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <prvGetNextExpireTime+0x44>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <prvGetNextExpireTime+0x44>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e001      	b.n	8003f7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	20000c10 	.word	0x20000c10

08003f8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f94:	f7ff f98a 	bl	80032ac <xTaskGetTickCount>
 8003f98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <prvSampleTimeNow+0x3c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d205      	bcs.n	8003fb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fa4:	f000 f904 	bl	80041b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e002      	b.n	8003fb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <prvSampleTimeNow+0x3c>)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000c20 	.word	0x20000c20

08003fcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d812      	bhi.n	8004018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	1ad2      	subs	r2, r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d302      	bcc.n	8004006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004000:	2301      	movs	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e01b      	b.n	800403e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <prvInsertTimerInActiveList+0x7c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3304      	adds	r3, #4
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f7fd fef0 	bl	8001df6 <vListInsert>
 8004016:	e012      	b.n	800403e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d206      	bcs.n	800402e <prvInsertTimerInActiveList+0x62>
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d302      	bcc.n	800402e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004028:	2301      	movs	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e007      	b.n	800403e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <prvInsertTimerInActiveList+0x80>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7fd fedc 	bl	8001df6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800403e:	697b      	ldr	r3, [r7, #20]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000c14 	.word	0x20000c14
 800404c:	20000c10 	.word	0x20000c10

08004050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	; 0x38
 8004054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004056:	e099      	b.n	800418c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	da17      	bge.n	800408e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	3304      	adds	r3, #4
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <prvProcessReceivedCommands+0x2e>
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e7fe      	b.n	800407c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004084:	6850      	ldr	r0, [r2, #4]
 8004086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	4611      	mov	r1, r2
 800408c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	db7a      	blt.n	800418a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd fedf 	bl	8001e68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040aa:	463b      	mov	r3, r7
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff6d 	bl	8003f8c <prvSampleTimeNow>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b09      	cmp	r3, #9
 80040b8:	d868      	bhi.n	800418c <prvProcessReceivedCommands+0x13c>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <prvProcessReceivedCommands+0x70>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	080040e9 	.word	0x080040e9
 80040c8:	080040e9 	.word	0x080040e9
 80040cc:	0800418d 	.word	0x0800418d
 80040d0:	08004143 	.word	0x08004143
 80040d4:	08004179 	.word	0x08004179
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040e9 	.word	0x080040e9
 80040e0:	0800418d 	.word	0x0800418d
 80040e4:	08004143 	.word	0x08004143
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	18d1      	adds	r1, r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f6:	f7ff ff69 	bl	8003fcc <prvInsertTimerInActiveList>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d045      	beq.n	800418c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004106:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d13d      	bne.n	800418c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	441a      	add	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2300      	movs	r3, #0
 800411e:	2100      	movs	r1, #0
 8004120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004122:	f7ff fe23 	bl	8003d6c <xTimerGenericCommand>
 8004126:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d12e      	bne.n	800418c <prvProcessReceivedCommands+0x13c>
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e7fe      	b.n	8004140 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <prvProcessReceivedCommands+0x114>
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e7fe      	b.n	8004162 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	699a      	ldr	r2, [r3, #24]
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	18d1      	adds	r1, r2, r3
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004172:	f7ff ff2b 	bl	8003fcc <prvInsertTimerInActiveList>
					break;
 8004176:	e009      	b.n	800418c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004184:	f000 fbb6 	bl	80048f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004188:	e000      	b.n	800418c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800418a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <prvProcessReceivedCommands+0x15c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1d39      	adds	r1, r7, #4
 8004192:	2200      	movs	r2, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe f9bf 	bl	8002518 <xQueueReceive>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f47f af5b 	bne.w	8004058 <prvProcessReceivedCommands+0x8>
	}
}
 80041a2:	bf00      	nop
 80041a4:	3730      	adds	r7, #48	; 0x30
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000c18 	.word	0x20000c18

080041b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041b6:	e044      	b.n	8004242 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041b8:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <prvSwitchTimerLists+0xb8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041c2:	4b29      	ldr	r3, [pc, #164]	; (8004268 <prvSwitchTimerLists+0xb8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fd fe49 	bl	8001e68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d12d      	bne.n	8004242 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4413      	add	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d90e      	bls.n	8004216 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004204:	4b18      	ldr	r3, [pc, #96]	; (8004268 <prvSwitchTimerLists+0xb8>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f7fd fdf1 	bl	8001df6 <vListInsert>
 8004214:	e015      	b.n	8004242 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004216:	2300      	movs	r3, #0
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	2300      	movs	r3, #0
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	2100      	movs	r1, #0
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fda3 	bl	8003d6c <xTimerGenericCommand>
 8004226:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <prvSwitchTimerLists+0x92>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	e7fe      	b.n	8004240 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <prvSwitchTimerLists+0xb8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1b5      	bne.n	80041b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <prvSwitchTimerLists+0xb8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <prvSwitchTimerLists+0xbc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a04      	ldr	r2, [pc, #16]	; (8004268 <prvSwitchTimerLists+0xb8>)
 8004258:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800425a:	4a04      	ldr	r2, [pc, #16]	; (800426c <prvSwitchTimerLists+0xbc>)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000c10 	.word	0x20000c10
 800426c:	20000c14 	.word	0x20000c14

08004270 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004276:	f000 f961 	bl	800453c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <prvCheckForValidListAndQueue+0x60>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d120      	bne.n	80042c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004282:	4814      	ldr	r0, [pc, #80]	; (80042d4 <prvCheckForValidListAndQueue+0x64>)
 8004284:	f7fd fd66 	bl	8001d54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004288:	4813      	ldr	r0, [pc, #76]	; (80042d8 <prvCheckForValidListAndQueue+0x68>)
 800428a:	f7fd fd63 	bl	8001d54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <prvCheckForValidListAndQueue+0x6c>)
 8004290:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <prvCheckForValidListAndQueue+0x64>)
 8004292:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <prvCheckForValidListAndQueue+0x70>)
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <prvCheckForValidListAndQueue+0x68>)
 8004298:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800429a:	2300      	movs	r3, #0
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <prvCheckForValidListAndQueue+0x74>)
 80042a0:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <prvCheckForValidListAndQueue+0x78>)
 80042a2:	2110      	movs	r1, #16
 80042a4:	200a      	movs	r0, #10
 80042a6:	f7fd fe71 	bl	8001f8c <xQueueGenericCreateStatic>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <prvCheckForValidListAndQueue+0x60>)
 80042ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <prvCheckForValidListAndQueue+0x60>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <prvCheckForValidListAndQueue+0x60>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	490b      	ldr	r1, [pc, #44]	; (80042ec <prvCheckForValidListAndQueue+0x7c>)
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe fc98 	bl	8002bf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042c4:	f000 f968 	bl	8004598 <vPortExitCritical>
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000c18 	.word	0x20000c18
 80042d4:	20000be8 	.word	0x20000be8
 80042d8:	20000bfc 	.word	0x20000bfc
 80042dc:	20000c10 	.word	0x20000c10
 80042e0:	20000c14 	.word	0x20000c14
 80042e4:	20000cc4 	.word	0x20000cc4
 80042e8:	20000c24 	.word	0x20000c24
 80042ec:	08004c00 	.word	0x08004c00

080042f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3b04      	subs	r3, #4
 8004300:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b04      	subs	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f023 0201 	bic.w	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3b04      	subs	r3, #4
 800431e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <pxPortInitialiseStack+0x64>)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3b14      	subs	r3, #20
 800432a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b04      	subs	r3, #4
 8004336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f06f 0202 	mvn.w	r2, #2
 800433e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3b20      	subs	r3, #32
 8004344:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	08004359 	.word	0x08004359

08004358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <prvTaskExitError+0x50>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d009      	beq.n	8004380 <prvTaskExitError+0x28>
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e7fe      	b.n	800437e <prvTaskExitError+0x26>
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004392:	bf00      	nop
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0fc      	beq.n	8004394 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	2000000c 	.word	0x2000000c
 80043ac:	00000000 	.word	0x00000000

080043b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043b0:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <pxCurrentTCBConst2>)
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	6808      	ldr	r0, [r1, #0]
 80043b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ba:	f380 8809 	msr	PSP, r0
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f380 8811 	msr	BASEPRI, r0
 80043ca:	4770      	bx	lr
 80043cc:	f3af 8000 	nop.w

080043d0 <pxCurrentTCBConst2>:
 80043d0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop

080043d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043d8:	4808      	ldr	r0, [pc, #32]	; (80043fc <prvPortStartFirstTask+0x24>)
 80043da:	6800      	ldr	r0, [r0, #0]
 80043dc:	6800      	ldr	r0, [r0, #0]
 80043de:	f380 8808 	msr	MSP, r0
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f380 8814 	msr	CONTROL, r0
 80043ea:	b662      	cpsie	i
 80043ec:	b661      	cpsie	f
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	df00      	svc	0
 80043f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043fa:	bf00      	nop
 80043fc:	e000ed08 	.word	0xe000ed08

08004400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004406:	4b44      	ldr	r3, [pc, #272]	; (8004518 <xPortStartScheduler+0x118>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a44      	ldr	r2, [pc, #272]	; (800451c <xPortStartScheduler+0x11c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d109      	bne.n	8004424 <xPortStartScheduler+0x24>
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	e7fe      	b.n	8004422 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004424:	4b3c      	ldr	r3, [pc, #240]	; (8004518 <xPortStartScheduler+0x118>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3d      	ldr	r2, [pc, #244]	; (8004520 <xPortStartScheduler+0x120>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d109      	bne.n	8004442 <xPortStartScheduler+0x42>
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e7fe      	b.n	8004440 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004442:	4b38      	ldr	r3, [pc, #224]	; (8004524 <xPortStartScheduler+0x124>)
 8004444:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	22ff      	movs	r2, #255	; 0xff
 8004452:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4b30      	ldr	r3, [pc, #192]	; (8004528 <xPortStartScheduler+0x128>)
 8004468:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800446a:	4b30      	ldr	r3, [pc, #192]	; (800452c <xPortStartScheduler+0x12c>)
 800446c:	2207      	movs	r2, #7
 800446e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004470:	e009      	b.n	8004486 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <xPortStartScheduler+0x12c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3b01      	subs	r3, #1
 8004478:	4a2c      	ldr	r2, [pc, #176]	; (800452c <xPortStartScheduler+0x12c>)
 800447a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	d0ef      	beq.n	8004472 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <xPortStartScheduler+0x12c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1c3 0307 	rsb	r3, r3, #7
 800449a:	2b04      	cmp	r3, #4
 800449c:	d009      	beq.n	80044b2 <xPortStartScheduler+0xb2>
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	e7fe      	b.n	80044b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <xPortStartScheduler+0x12c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <xPortStartScheduler+0x12c>)
 80044ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044bc:	4b1b      	ldr	r3, [pc, #108]	; (800452c <xPortStartScheduler+0x12c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <xPortStartScheduler+0x12c>)
 80044c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <xPortStartScheduler+0x130>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a16      	ldr	r2, [pc, #88]	; (8004530 <xPortStartScheduler+0x130>)
 80044d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044dc:	4b14      	ldr	r3, [pc, #80]	; (8004530 <xPortStartScheduler+0x130>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <xPortStartScheduler+0x130>)
 80044e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044e8:	f000 f8d6 	bl	8004698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <xPortStartScheduler+0x134>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044f2:	f000 f8f5 	bl	80046e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <xPortStartScheduler+0x138>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <xPortStartScheduler+0x138>)
 80044fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004502:	f7ff ff69 	bl	80043d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004506:	f7fe ff9f 	bl	8003448 <vTaskSwitchContext>
	prvTaskExitError();
 800450a:	f7ff ff25 	bl	8004358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	e000ed00 	.word	0xe000ed00
 800451c:	410fc271 	.word	0x410fc271
 8004520:	410fc270 	.word	0x410fc270
 8004524:	e000e400 	.word	0xe000e400
 8004528:	20000d14 	.word	0x20000d14
 800452c:	20000d18 	.word	0x20000d18
 8004530:	e000ed20 	.word	0xe000ed20
 8004534:	2000000c 	.word	0x2000000c
 8004538:	e000ef34 	.word	0xe000ef34

0800453c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <vPortEnterCritical+0x54>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a0d      	ldr	r2, [pc, #52]	; (8004590 <vPortEnterCritical+0x54>)
 800455c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800455e:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <vPortEnterCritical+0x54>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10e      	bne.n	8004584 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <vPortEnterCritical+0x58>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <vPortEnterCritical+0x48>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	e7fe      	b.n	8004582 <vPortEnterCritical+0x46>
	}
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	2000000c 	.word	0x2000000c
 8004594:	e000ed04 	.word	0xe000ed04

08004598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800459e:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <vPortExitCritical+0x4c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <vPortExitCritical+0x22>
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	e7fe      	b.n	80045b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <vPortExitCritical+0x4c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3b01      	subs	r3, #1
 80045c0:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <vPortExitCritical+0x4c>)
 80045c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045c4:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <vPortExitCritical+0x4c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <vPortExitCritical+0x3e>
 80045cc:	2300      	movs	r3, #0
 80045ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2000000c 	.word	0x2000000c
	...

080045f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045f0:	f3ef 8009 	mrs	r0, PSP
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	4b15      	ldr	r3, [pc, #84]	; (8004650 <pxCurrentTCBConst>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f01e 0f10 	tst.w	lr, #16
 8004600:	bf08      	it	eq
 8004602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460a:	6010      	str	r0, [r2, #0]
 800460c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004614:	f380 8811 	msr	BASEPRI, r0
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f7fe ff12 	bl	8003448 <vTaskSwitchContext>
 8004624:	f04f 0000 	mov.w	r0, #0
 8004628:	f380 8811 	msr	BASEPRI, r0
 800462c:	bc09      	pop	{r0, r3}
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	6808      	ldr	r0, [r1, #0]
 8004632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004636:	f01e 0f10 	tst.w	lr, #16
 800463a:	bf08      	it	eq
 800463c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004640:	f380 8809 	msr	PSP, r0
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst>:
 8004650:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004670:	f7fe fe2c 	bl	80032cc <xTaskIncrementTick>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <xPortSysTickHandler+0x3c>)
 800467c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	2300      	movs	r3, #0
 8004684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <vPortSetupTimerInterrupt+0x34>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <vPortSetupTimerInterrupt+0x38>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <vPortSetupTimerInterrupt+0x3c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <vPortSetupTimerInterrupt+0x40>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	4a09      	ldr	r2, [pc, #36]	; (80046dc <vPortSetupTimerInterrupt+0x44>)
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ba:	4b04      	ldr	r3, [pc, #16]	; (80046cc <vPortSetupTimerInterrupt+0x34>)
 80046bc:	2207      	movs	r2, #7
 80046be:	601a      	str	r2, [r3, #0]
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000e010 	.word	0xe000e010
 80046d0:	e000e018 	.word	0xe000e018
 80046d4:	20000000 	.word	0x20000000
 80046d8:	10624dd3 	.word	0x10624dd3
 80046dc:	e000e014 	.word	0xe000e014

080046e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046f0 <vPortEnableVFP+0x10>
 80046e4:	6801      	ldr	r1, [r0, #0]
 80046e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ea:	6001      	str	r1, [r0, #0]
 80046ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046ee:	bf00      	nop
 80046f0:	e000ed88 	.word	0xe000ed88

080046f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046fa:	f3ef 8305 	mrs	r3, IPSR
 80046fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	d913      	bls.n	800472e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004706:	4a16      	ldr	r2, [pc, #88]	; (8004760 <vPortValidateInterruptPriority+0x6c>)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <vPortValidateInterruptPriority+0x70>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	7afa      	ldrb	r2, [r7, #11]
 8004716:	429a      	cmp	r2, r3
 8004718:	d209      	bcs.n	800472e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	e7fe      	b.n	800472c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800472e:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <vPortValidateInterruptPriority+0x74>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <vPortValidateInterruptPriority+0x78>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d909      	bls.n	8004752 <vPortValidateInterruptPriority+0x5e>
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	e7fe      	b.n	8004750 <vPortValidateInterruptPriority+0x5c>
	}
 8004752:	bf00      	nop
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000e3f0 	.word	0xe000e3f0
 8004764:	20000d14 	.word	0x20000d14
 8004768:	e000ed0c 	.word	0xe000ed0c
 800476c:	20000d18 	.word	0x20000d18

08004770 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800477c:	f7fe fcec 	bl	8003158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004780:	4b57      	ldr	r3, [pc, #348]	; (80048e0 <pvPortMalloc+0x170>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004788:	f000 f90c 	bl	80049a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800478c:	4b55      	ldr	r3, [pc, #340]	; (80048e4 <pvPortMalloc+0x174>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 808c 	bne.w	80048b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01c      	beq.n	80047da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80047a0:	2208      	movs	r2, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f023 0307 	bic.w	r3, r3, #7
 80047b8:	3308      	adds	r3, #8
 80047ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <pvPortMalloc+0x6a>
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e7fe      	b.n	80047d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d068      	beq.n	80048b2 <pvPortMalloc+0x142>
 80047e0:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <pvPortMalloc+0x178>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d863      	bhi.n	80048b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047ea:	4b40      	ldr	r3, [pc, #256]	; (80048ec <pvPortMalloc+0x17c>)
 80047ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047ee:	4b3f      	ldr	r3, [pc, #252]	; (80048ec <pvPortMalloc+0x17c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047f4:	e004      	b.n	8004800 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d903      	bls.n	8004812 <pvPortMalloc+0xa2>
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f1      	bne.n	80047f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004812:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <pvPortMalloc+0x170>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004818:	429a      	cmp	r2, r3
 800481a:	d04a      	beq.n	80048b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2208      	movs	r2, #8
 8004822:	4413      	add	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad2      	subs	r2, r2, r3
 8004836:	2308      	movs	r3, #8
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	429a      	cmp	r2, r3
 800483c:	d91e      	bls.n	800487c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <pvPortMalloc+0xf4>
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e7fe      	b.n	8004862 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004876:	69b8      	ldr	r0, [r7, #24]
 8004878:	f000 f8f6 	bl	8004a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <pvPortMalloc+0x178>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <pvPortMalloc+0x178>)
 8004888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800488a:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <pvPortMalloc+0x178>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <pvPortMalloc+0x180>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d203      	bcs.n	800489e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <pvPortMalloc+0x178>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <pvPortMalloc+0x180>)
 800489c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <pvPortMalloc+0x174>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048b2:	f7fe fc5f 	bl	8003174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <pvPortMalloc+0x164>
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e7fe      	b.n	80048d2 <pvPortMalloc+0x162>
	return pvReturn;
 80048d4:	69fb      	ldr	r3, [r7, #28]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3728      	adds	r7, #40	; 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20004924 	.word	0x20004924
 80048e4:	20004930 	.word	0x20004930
 80048e8:	20004928 	.word	0x20004928
 80048ec:	2000491c 	.word	0x2000491c
 80048f0:	2000492c 	.word	0x2000492c

080048f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d046      	beq.n	8004994 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004906:	2308      	movs	r3, #8
 8004908:	425b      	negs	r3, r3
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4413      	add	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	4b20      	ldr	r3, [pc, #128]	; (800499c <vPortFree+0xa8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4013      	ands	r3, r2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <vPortFree+0x42>
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e7fe      	b.n	8004934 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <vPortFree+0x5e>
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	e7fe      	b.n	8004950 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4b11      	ldr	r3, [pc, #68]	; (800499c <vPortFree+0xa8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d019      	beq.n	8004994 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d115      	bne.n	8004994 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <vPortFree+0xa8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	43db      	mvns	r3, r3
 8004972:	401a      	ands	r2, r3
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004978:	f7fe fbee 	bl	8003158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <vPortFree+0xac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4413      	add	r3, r2
 8004986:	4a06      	ldr	r2, [pc, #24]	; (80049a0 <vPortFree+0xac>)
 8004988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800498a:	6938      	ldr	r0, [r7, #16]
 800498c:	f000 f86c 	bl	8004a68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004990:	f7fe fbf0 	bl	8003174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004994:	bf00      	nop
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20004930 	.word	0x20004930
 80049a0:	20004928 	.word	0x20004928

080049a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80049ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049b0:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <prvHeapInit+0xac>)
 80049b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3307      	adds	r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0307 	bic.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <prvHeapInit+0xac>)
 80049d4:	4413      	add	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049dc:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <prvHeapInit+0xb0>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049e2:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <prvHeapInit+0xb0>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4413      	add	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049f0:	2208      	movs	r2, #8
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <prvHeapInit+0xb4>)
 8004a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <prvHeapInit+0xb4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a0e:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <prvHeapInit+0xb4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <prvHeapInit+0xb4>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <prvHeapInit+0xb8>)
 8004a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <prvHeapInit+0xbc>)
 8004a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <prvHeapInit+0xc0>)
 8004a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	20000d1c 	.word	0x20000d1c
 8004a54:	2000491c 	.word	0x2000491c
 8004a58:	20004924 	.word	0x20004924
 8004a5c:	2000492c 	.word	0x2000492c
 8004a60:	20004928 	.word	0x20004928
 8004a64:	20004930 	.word	0x20004930

08004a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a70:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <prvInsertBlockIntoFreeList+0xac>)
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e002      	b.n	8004a7c <prvInsertBlockIntoFreeList+0x14>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d8f7      	bhi.n	8004a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d108      	bne.n	8004aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	441a      	add	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d118      	bne.n	8004af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <prvInsertBlockIntoFreeList+0xb0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d00d      	beq.n	8004ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	441a      	add	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e008      	b.n	8004af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvInsertBlockIntoFreeList+0xb0>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e003      	b.n	8004af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d002      	beq.n	8004b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2000491c 	.word	0x2000491c
 8004b18:	20004924 	.word	0x20004924

08004b1c <__libc_init_array>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4e0d      	ldr	r6, [pc, #52]	; (8004b54 <__libc_init_array+0x38>)
 8004b20:	4c0d      	ldr	r4, [pc, #52]	; (8004b58 <__libc_init_array+0x3c>)
 8004b22:	1ba4      	subs	r4, r4, r6
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	2500      	movs	r5, #0
 8004b28:	42a5      	cmp	r5, r4
 8004b2a:	d109      	bne.n	8004b40 <__libc_init_array+0x24>
 8004b2c:	4e0b      	ldr	r6, [pc, #44]	; (8004b5c <__libc_init_array+0x40>)
 8004b2e:	4c0c      	ldr	r4, [pc, #48]	; (8004b60 <__libc_init_array+0x44>)
 8004b30:	f000 f82c 	bl	8004b8c <_init>
 8004b34:	1ba4      	subs	r4, r4, r6
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	2500      	movs	r5, #0
 8004b3a:	42a5      	cmp	r5, r4
 8004b3c:	d105      	bne.n	8004b4a <__libc_init_array+0x2e>
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b44:	4798      	blx	r3
 8004b46:	3501      	adds	r5, #1
 8004b48:	e7ee      	b.n	8004b28 <__libc_init_array+0xc>
 8004b4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b4e:	4798      	blx	r3
 8004b50:	3501      	adds	r5, #1
 8004b52:	e7f2      	b.n	8004b3a <__libc_init_array+0x1e>
 8004b54:	08004ccc 	.word	0x08004ccc
 8004b58:	08004ccc 	.word	0x08004ccc
 8004b5c:	08004ccc 	.word	0x08004ccc
 8004b60:	08004cd0 	.word	0x08004cd0

08004b64 <memcpy>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	1e43      	subs	r3, r0, #1
 8004b68:	440a      	add	r2, r1
 8004b6a:	4291      	cmp	r1, r2
 8004b6c:	d100      	bne.n	8004b70 <memcpy+0xc>
 8004b6e:	bd10      	pop	{r4, pc}
 8004b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b78:	e7f7      	b.n	8004b6a <memcpy+0x6>

08004b7a <memset>:
 8004b7a:	4402      	add	r2, r0
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d100      	bne.n	8004b84 <memset+0xa>
 8004b82:	4770      	bx	lr
 8004b84:	f803 1b01 	strb.w	r1, [r3], #1
 8004b88:	e7f9      	b.n	8004b7e <memset+0x4>
	...

08004b8c <_init>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr

08004b98 <_fini>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr
